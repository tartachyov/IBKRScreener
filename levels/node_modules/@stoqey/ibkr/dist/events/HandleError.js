"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var connection_1 = require("../connection");
var isEmpty_1 = __importDefault(require("lodash/isEmpty"));
var log_1 = require("../log");
/**
 * Assuming IBKR returns predictable errors
 * Check if errors thrown match the targetError,
 * @param targetErrors - target strings,
 * @param catchError - function to stop/tell caller that targetErrors where matched
 *
 * @returns () => void // remove listener function
 * @important always call the returned function to remove listeners and avoid memory leaks
 */
function handleEventfulError(reqId, targetErrors, 
// eslint-disable-next-line @typescript-eslint/ban-types
catchError) {
    if (isEmpty_1.default(targetErrors)) {
        return function () { };
    }
    // convert all targeted errors to lowercase
    targetErrors = targetErrors.map(function (er) { return (er || '').toLowerCase(); });
    var ib = connection_1.IBKRConnection.Instance.getIBKR();
    var handleError = function (error, errorData) {
        var reqIdFromError = errorData && errorData.id;
        if (reqIdFromError === reqId) {
            log_1.verbose('handleEventfulError > handleError.reqIdFromError', reqId);
            catchError();
        }
        // message to lower case
        var errorMessage = ((error && error.message) || '').toLowerCase();
        var isError = targetErrors.some(function (tError) { return errorMessage.includes(tError); });
        if (isError) {
            log_1.verbose('handleEventfulError > handleError.errorMessage', errorMessage);
            catchError();
        }
    };
    ib.on('error', handleError);
    // return remover
    return function () {
        ib.off('error', handleError);
    };
}
exports.handleEventfulError = handleEventfulError;
//# sourceMappingURL=HandleError.js.map