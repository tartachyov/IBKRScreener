"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var includes_1 = __importDefault(require("lodash/includes"));
var isEmpty_1 = __importDefault(require("lodash/isEmpty"));
var config_1 = require("../config");
var IBKRConnection_1 = __importDefault(require("../connection/IBKRConnection"));
var events_1 = require("../events");
var log_1 = require("../log");
var portfolios_1 = require("../portfolios");
var text_utils_1 = require("../_utils/text.utils");
var appEvents = events_1.IbkrEvents.Instance;
var AccountSummary = /** @class */ (function () {
    function AccountSummary() {
        var _this = this;
        this.accountReady = false;
        this.tickerId = text_utils_1.getRadomReqId();
        this.accountSummary = {};
        /**
         * reqAccountSummary
         */
        this.reqAccountSummary = function () {
            // Request Account summary from here
            _this.ib.reqAccountSummary(_this.tickerId, 'All', [
                'AccountType',
                'NetLiquidation',
                'TotalCashValue',
                'SettledCash',
                'AccruedCash',
                'BuyingPower',
                'EquityWithLoanValue',
                'PreviousEquityWithLoanValue',
                'GrossPositionValue',
                'RegTEquity',
                'RegTMargin',
                'SMA',
                'InitMarginReq',
                'MaintMarginReq',
                'AvailableFunds',
                'ExcessLiquidity',
                'Cushion',
                'FullInitMarginReq',
                'FullMaintMarginReq',
                'FullAvailableFunds',
                'FullExcessLiquidity',
                'LookAheadNextChange',
                'LookAheadInitMarginReq',
                'LookAheadMaintMarginReq',
                'LookAheadAvailableFunds',
                'LookAheadExcessLiquidity',
                'HighestSeverity',
                'DayTradesRemaining',
                'Leverage',
            ]);
        };
        this.ib = IBKRConnection_1.default.Instance.getIBKR();
    }
    Object.defineProperty(AccountSummary, "Instance", {
        get: function () {
            return this._instance || (this._instance = new this());
        },
        enumerable: true,
        configurable: true
    });
    AccountSummary.prototype.init = function () {
        var self = this;
        var ib = IBKRConnection_1.default.Instance.getIBKR();
        self.ib = ib;
        // Record values from here
        ib.on('accountSummary', function (reqId, account, tag, value, currency) {
            self.tickerId = reqId;
            self.AccountId = account;
            self.accountSummary.AccountId = account;
            self.accountSummary[tag] = value; // set the account value
            self.accountSummary.Currency = currency; // always set the account currency
            // log('accountSummaryEnd', { account, tag, value, });
        });
        // Return values from here
        ib.once('accountSummaryEnd', function () {
            var _a = self.AccountId, AccountId = _a === void 0 ? 'unknown' : _a, tickerId = self.tickerId, accountReady = self.accountReady, accountSummary = self.accountSummary;
            log_1.log('accountSummaryEnd', { AccountId: AccountId, tickerId: tickerId, accountReady: accountReady });
            ib.cancelAccountSummary(tickerId);
            events_1.publishDataToTopic({
                topic: events_1.IBKREVENTS.ON_ACCOUNT_SUMMARY,
                data: accountSummary,
            });
            self.accountReady = true;
        });
        self.reqAccountSummary();
    };
    /**
     * initialiseDep
     */
    AccountSummary.prototype.initialiseDep = function () {
        portfolios_1.Portfolios.Instance /*  */;
    }; /*  */
    /**
     * isLiveAccount
     * Check whether this is the live account
     */
    AccountSummary.prototype.isLiveAccount = function () {
        return includes_1.default(config_1.LIVE_ACCOUNT_IDS, this.AccountId);
    };
    /**
     * getAccountSummary
     */
    AccountSummary.prototype.getAccountSummary = function () {
        var _a = this, accountSummary = _a.accountSummary, reqAccountSummary = _a.reqAccountSummary;
        return new Promise(function (resolve) {
            if (!isEmpty_1.default(accountSummary)) {
                return resolve(accountSummary);
            }
            // listen for account summary
            var handleAccountSummary = function (accountSummaryData) {
                appEvents.off(events_1.IBKREVENTS.ON_ACCOUNT_SUMMARY, handleAccountSummary);
                resolve(accountSummaryData);
            };
            appEvents.on(events_1.IBKREVENTS.ON_ACCOUNT_SUMMARY, handleAccountSummary);
            reqAccountSummary();
        });
    };
    return AccountSummary;
}());
exports.AccountSummary = AccountSummary;
exports.default = AccountSummary;
//# sourceMappingURL=AccountSummary.js.map