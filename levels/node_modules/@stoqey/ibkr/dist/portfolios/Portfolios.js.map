{"version":3,"file":"Portfolios.js","sourceRoot":"","sources":["../../src/portfolios/Portfolios.ts"],"names":[],"mappings":"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","sourcesContent":["import ibkr from '@stoqey/ib';\nimport isEmpty from 'lodash/isEmpty';\nimport AccountSummary from '../account/AccountSummary';\nimport {IBKREVENTS, IbkrEvents} from '../events';\nimport {publishDataToTopic} from '../events/IbkrEvents.publisher';\nimport IBKRConnection from '../connection/IBKRConnection';\nimport {PortFolioUpdate} from './portfolios.interfaces';\nimport {IBKRAccountSummary} from '../account/account-summary.interfaces';\nimport {ORDER, OrderState} from '../orders';\nimport {log, verbose} from '../log';\nimport {ContractObject} from '../contracts';\n\nconst appEvents = IbkrEvents.Instance;\n\n/**\n * Log portfolio to console\n * @param @interface PortFolioUpdate\n */\nconst logPortfolio = ({marketPrice, averageCost, position, symbol, conId}: PortFolioUpdate) => {\n    const contractIdWithSymbol = `${symbol} ${conId}`;\n    if (Math.round(marketPrice) > Math.round(averageCost)) {\n        // We are in profit\n        log(\n            `logPortfolio:profit shares = ${position}, costPerShare -> ${averageCost} marketPrice -> ${marketPrice} `,\n            contractIdWithSymbol\n        );\n    } else {\n        // We are in loss\n        log(\n            `logPortfolio:LOSS shares = ${position}, costPerShare -> ${averageCost} marketPrice -> ${marketPrice}`,\n            contractIdWithSymbol\n        );\n    }\n};\n\nexport class Portfolios {\n    ib: ibkr;\n\n    accountSummary: IBKRAccountSummary;\n\n    private static _instance: Portfolios;\n\n    currentPortfolios: PortFolioUpdate[] = [];\n    portfoliosSnapshot: PortFolioUpdate[] = [];\n\n    public static get Instance(): Portfolios {\n        return this._instance || (this._instance = new this());\n    }\n\n    private constructor() {}\n\n    public init = async (): Promise<void> => {\n        const self = this;\n        this.ib = IBKRConnection.Instance.getIBKR();\n        const accountId = AccountSummary.Instance.AccountId;\n\n        const ib = this.ib;\n\n        ib.on(\n            'updatePortfolio',\n            (\n                contract,\n                position,\n                marketPrice,\n                marketValue,\n                averageCost,\n                unrealizedPNL,\n                realizedPNL,\n                accountName\n            ) => {\n                const thisPortfolio = {\n                    ...contract,\n                    position,\n                    marketPrice,\n                    marketValue,\n                    averageCost,\n                    unrealizedPNL,\n                    realizedPNL,\n                    accountName,\n                };\n                logPortfolio(thisPortfolio);\n                self.getPortfolios(); // refresh portfolios\n            }\n        );\n\n        ib.on('openOrder', function (\n            orderId,\n            contract: ContractObject,\n            order: ORDER,\n            orderState: OrderState\n        ) {\n            if (orderState.status === 'Filled') {\n                // check if portfolio exit, if not add it\n                const existingPortfolio = self.currentPortfolios.find(\n                    (porto) => porto.symbol === contract.symbol\n                );\n\n                if (isEmpty(existingPortfolio)) {\n                    // Add to currentPortfolios\n                    self.currentPortfolios.push({\n                        ...contract,\n                    });\n                } else {\n                    self.currentPortfolios = self.currentPortfolios.filter(\n                        (porto) => porto.symbol !== contract.symbol\n                    );\n                }\n\n                log(\n                    `Portfolio > openOrder FILLED`,\n                    ` -> ${contract.symbol} ${order.action} ${order.totalQuantity}  ${orderState.status}`\n                );\n                verbose(\n                    `Portfolio > ALL PORTFOLIOS`,\n                    ` -> ${JSON.stringify(self.currentPortfolios.map((por) => por.symbol))}`\n                );\n                // refresh the portfolios\n                self.getPortfolios();\n            }\n        });\n\n        log('AccountID', accountId);\n\n        ib.reqAccountUpdates(true, accountId);\n    };\n\n    /**\n     * getPortfolios\n     */\n    public getPortfolios = async (): Promise<PortFolioUpdate[]> => {\n        const self = this;\n        const ib = self.ib;\n\n        return new Promise((resolve) => {\n            let done = false;\n            const portfolios: {[x: string]: PortFolioUpdate} = {};\n\n            const handlePosition = (account, contract: ContractObject, position, averageCost) => {\n                const thisPortfolio = {...contract, position, averageCost};\n\n                let symbol = contract && contract.symbol;\n\n                // If forex use localSymbol\n                if (contract.secType === 'CASH') {\n                    symbol = contract && contract.localSymbol;\n                }\n\n                // Position has to be greater than 0\n                if (position === 0) {\n                    return;\n                }\n\n                thisPortfolio.symbol = symbol; // override symbol name\n\n                portfolios[symbol] = thisPortfolio;\n            };\n\n            const handlePositionEnd = (portfoliosData: PortFolioUpdate[]) => {\n                if (!done) {\n                    done = true;\n                    appEvents.off('position', handlePosition);\n\n                    self.currentPortfolios = portfoliosData;\n                    publishDataToTopic({\n                        topic: IBKREVENTS.PORTFOLIOS,\n                        data: portfoliosData,\n                    });\n                    resolve(portfoliosData);\n                }\n            };\n\n            ib.once('positionEnd', () => {\n                const portfoliosData = Object.keys(portfolios).map(\n                    (portfolioKey) => portfolios[portfolioKey]\n                );\n                log('getPortfolios positionEnd', `********************** =`);\n                log(\n                    'getPortfolios positionEnd',\n                    `********************** ${\n                        portfoliosData && portfoliosData.length\n                    } symbols=${portfoliosData.map((u) => u.localSymbol)}`\n                );\n                handlePositionEnd(portfoliosData);\n            });\n\n            ib.on('position', handlePosition);\n\n            ib.reqPositions();\n        });\n    };\n}\n\nexport default Portfolios;\n"]}