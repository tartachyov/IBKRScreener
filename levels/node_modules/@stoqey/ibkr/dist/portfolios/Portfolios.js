"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var isEmpty_1 = __importDefault(require("lodash/isEmpty"));
var AccountSummary_1 = __importDefault(require("../account/AccountSummary"));
var events_1 = require("../events");
var IbkrEvents_publisher_1 = require("../events/IbkrEvents.publisher");
var IBKRConnection_1 = __importDefault(require("../connection/IBKRConnection"));
var log_1 = require("../log");
var appEvents = events_1.IbkrEvents.Instance;
/**
 * Log portfolio to console
 * @param @interface PortFolioUpdate
 */
var logPortfolio = function (_a) {
    var marketPrice = _a.marketPrice, averageCost = _a.averageCost, position = _a.position, symbol = _a.symbol, conId = _a.conId;
    var contractIdWithSymbol = symbol + " " + conId;
    if (Math.round(marketPrice) > Math.round(averageCost)) {
        // We are in profit
        log_1.log("logPortfolio:profit shares = " + position + ", costPerShare -> " + averageCost + " marketPrice -> " + marketPrice + " ", contractIdWithSymbol);
    }
    else {
        // We are in loss
        log_1.log("logPortfolio:LOSS shares = " + position + ", costPerShare -> " + averageCost + " marketPrice -> " + marketPrice, contractIdWithSymbol);
    }
};
var Portfolios = /** @class */ (function () {
    function Portfolios() {
        var _this = this;
        this.currentPortfolios = [];
        this.portfoliosSnapshot = [];
        this.init = function () { return __awaiter(_this, void 0, void 0, function () {
            var self, accountId, ib;
            return __generator(this, function (_a) {
                self = this;
                this.ib = IBKRConnection_1.default.Instance.getIBKR();
                accountId = AccountSummary_1.default.Instance.AccountId;
                ib = this.ib;
                ib.on('updatePortfolio', function (contract, position, marketPrice, marketValue, averageCost, unrealizedPNL, realizedPNL, accountName) {
                    var thisPortfolio = __assign(__assign({}, contract), { position: position,
                        marketPrice: marketPrice,
                        marketValue: marketValue,
                        averageCost: averageCost,
                        unrealizedPNL: unrealizedPNL,
                        realizedPNL: realizedPNL,
                        accountName: accountName });
                    logPortfolio(thisPortfolio);
                    self.getPortfolios(); // refresh portfolios
                });
                ib.on('openOrder', function (orderId, contract, order, orderState) {
                    if (orderState.status === 'Filled') {
                        // check if portfolio exit, if not add it
                        var existingPortfolio = self.currentPortfolios.find(function (porto) { return porto.symbol === contract.symbol; });
                        if (isEmpty_1.default(existingPortfolio)) {
                            // Add to currentPortfolios
                            self.currentPortfolios.push(__assign({}, contract));
                        }
                        else {
                            self.currentPortfolios = self.currentPortfolios.filter(function (porto) { return porto.symbol !== contract.symbol; });
                        }
                        log_1.log("Portfolio > openOrder FILLED", " -> " + contract.symbol + " " + order.action + " " + order.totalQuantity + "  " + orderState.status);
                        log_1.verbose("Portfolio > ALL PORTFOLIOS", " -> " + JSON.stringify(self.currentPortfolios.map(function (por) { return por.symbol; })));
                        // refresh the portfolios
                        self.getPortfolios();
                    }
                });
                log_1.log('AccountID', accountId);
                ib.reqAccountUpdates(true, accountId);
                return [2 /*return*/];
            });
        }); };
        /**
         * getPortfolios
         */
        this.getPortfolios = function () { return __awaiter(_this, void 0, void 0, function () {
            var self, ib;
            return __generator(this, function (_a) {
                self = this;
                ib = self.ib;
                return [2 /*return*/, new Promise(function (resolve) {
                        var done = false;
                        var portfolios = {};
                        var handlePosition = function (account, contract, position, averageCost) {
                            var thisPortfolio = __assign(__assign({}, contract), { position: position, averageCost: averageCost });
                            var symbol = contract && contract.symbol;
                            // If forex use localSymbol
                            if (contract.secType === 'CASH') {
                                symbol = contract && contract.localSymbol;
                            }
                            // Position has to be greater than 0
                            if (position === 0) {
                                return;
                            }
                            thisPortfolio.symbol = symbol; // override symbol name
                            portfolios[symbol] = thisPortfolio;
                        };
                        var handlePositionEnd = function (portfoliosData) {
                            if (!done) {
                                done = true;
                                appEvents.off('position', handlePosition);
                                self.currentPortfolios = portfoliosData;
                                IbkrEvents_publisher_1.publishDataToTopic({
                                    topic: events_1.IBKREVENTS.PORTFOLIOS,
                                    data: portfoliosData,
                                });
                                resolve(portfoliosData);
                            }
                        };
                        ib.once('positionEnd', function () {
                            var portfoliosData = Object.keys(portfolios).map(function (portfolioKey) { return portfolios[portfolioKey]; });
                            log_1.log('getPortfolios positionEnd', "********************** =");
                            log_1.log('getPortfolios positionEnd', "********************** " + (portfoliosData && portfoliosData.length) + " symbols=" + portfoliosData.map(function (u) { return u.localSymbol; }));
                            handlePositionEnd(portfoliosData);
                        });
                        ib.on('position', handlePosition);
                        ib.reqPositions();
                    })];
            });
        }); };
    }
    Object.defineProperty(Portfolios, "Instance", {
        get: function () {
            return this._instance || (this._instance = new this());
        },
        enumerable: true,
        configurable: true
    });
    return Portfolios;
}());
exports.Portfolios = Portfolios;
exports.default = Portfolios;
//# sourceMappingURL=Portfolios.js.map