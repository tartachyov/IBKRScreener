{"version":3,"file":"dev.js","sourceRoot":"","sources":["../src/dev.ts"],"names":[],"mappings":";;;;;AAAA,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC1B,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAE7B,uCAAqB;AAErB,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,OAAO,UAAK,CAAC,CAAA;AAE/B,IAAM,EAAE,GAAG,IAAI,UAAK,CAAC;IACnB,QAAQ,EAAE,CAAC;IACX,IAAI,EAAE,WAAW;IACjB,IAAI,EAAE,IAAI;CACX,CAAC,CAAC;AAGH,EAAE,CAAC,EAAE,CAAC,OAAO,EAAE,UAAU,GAAG;IAC1B,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,UAAU,GAAG;IAC1B,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,EAAE,CAAC,gBAAgB,EAAE,UAAU,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO;IACnG,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE;QAC1B,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;KAClC;SAAM;QACL,OAAO,CAAC,GAAG,CACT,KAAK,EACL,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,GAAG,EACH,KAAK,EACL,MAAM,EACN,QAAQ,EACR,OAAO,CACR,CAAC;KACH;AACH,CAAC,CAAC,CAAC;AAGH,EAAE,CAAC,OAAO,EAAE,CAAC;AAEb,IAAM,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;AAE1D,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;AACrC,6GAA6G;AAC7G,EAAE,CAAC,iBAAiB,CAAC,CAAC,EAAE,QAAQ,EAAE,oBAAoB,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;AAEnG,EAAE,CAAC,EAAE,CAAC,gBAAgB,EAAE,UAAU,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO;IACnG,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE;QAC1B,0CAA0C;QAC1C,EAAE,CAAC,UAAU,EAAE,CAAC;KACjB;AACH,CAAC,CAAC,CAAC","sourcesContent":["var _ = require('lodash');\nvar chalk = require('chalk');\n\nimport ibApi from '.'\n\nconsole.log('ib', typeof ibApi)\n\nconst ib = new ibApi({\n  clientId: 0,\n  host: '127.0.0.1',\n  port: 7497\n});\n\n\nib.on('error', function (err) {\n  console.error(chalk.red(err.message));\n}).on('error', function (err) {\n  console.error(chalk.red(err.message));\n}).on('historicalData', function (reqId, date, open, high, low, close, volume, barCount, WAP, hasGaps) {\n  if (_.includes([-1], open)) {\n    console.log('endhistoricalData');\n  } else {\n    console.log(\n      reqId,\n      date,\n      open,\n      high,\n      low,\n      close,\n      volume,\n      barCount,\n      hasGaps\n    );\n  }\n});\n\n\nib.connect();\n\nconst contract = ib.contract.stock('SPY', 'SMART', 'USD');\n\nconsole.log('contract is', contract);\n// tickerId, contract, endDateTime, durationStr, barSizeSetting, whatToShow, useRTH, formatDate, keepUpToDate\nib.reqHistoricalData(1, contract, '202005011 12:00:00', '1800 S', '1 secs', 'TRADES', 1, 1, false);\n\nib.on('historicalData', function (reqId, date, open, high, low, close, volume, barCount, WAP, hasGaps) {\n  if (_.includes([-1], open)) {\n    //ib.cancelHistoricalData(1);  // tickerId\n    ib.disconnect();\n  }\n});\n"]}