/// <reference types="node" />
import { EventEmitter } from 'events';
declare class IB extends EventEmitter {
    _controller: any;
    contract: {
        fop: typeof import("./contract/fop").fop;
        future: typeof import("./contract/future").future;
        option: typeof import("./contract/option").option;
        stock: typeof import("./contract/stock").stock;
        combo: typeof import("./contract/combo").combo;
        cfd: typeof import("./contract/cfd").cfd;
        forex: typeof import("./contract/forex").forex;
        ind: typeof import("./contract/ind").index;
    };
    order: {
        limit: typeof import("./order/limit").limit;
        market: typeof import("./order/market").market;
        stop: typeof import("./order/stop").stop;
        stopLimit: typeof import("./order/stopLimit").stopLimit;
        marketClose: typeof import("./order/marketClose").marketClose;
        trailingStop: typeof import("./order/trailingStop").trailingStop;
    };
    util: {
        _findKeyForValue: typeof import("./util")._findKeyForValue;
        incomingToString: typeof import("./util").incomingToString;
        outgoingToString: typeof import("./util").outgoingToString;
        tickTypeToString: typeof import("./util").tickTypeToString;
        numberToString: typeof import("./util").numberToString;
    };
    constructor(options: any);
    _send: () => void;
    connect: () => IB;
    disconnect: () => any;
    calculateImpliedVolatility: (reqId: any, contract: any, optionPrice: any, underPrice: any) => any;
    calculateOptionPrice: (reqId: any, contract: any, volatility: any, underPrice: any) => any;
    cancelAccountSummary: (reqId: any) => any;
    cancelPositionsMulti: (reqId: any) => any;
    cancelAccountUpdatesMulti: (reqId: any) => any;
    cancelCalculateImpliedVolatility: (reqId: any) => any;
    cancelCalculateOptionPrice: (reqId: any) => any;
    cancelFundamentalData: (reqId: any) => any;
    cancelHistoricalData: (tickerId: any) => any;
    cancelMktData: (tickerId: any) => any;
    cancelMktDepth: (tickerId: any) => any;
    cancelNewsBulletins: () => any;
    cancelOrder: (id: any) => any;
    cancelPositions: () => any;
    cancelRealTimeBars: (tickerId: any) => any;
    cancelScannerSubscription: (tickerId: any) => any;
    exerciseOptions: (tickerId: any, contract: any, exerciseAction: any, exerciseQuantity: any, account: any, override: any) => any;
    placeOrder: (id: any, contract: any, order: any) => any;
    replaceFA: (faDataType: any, xml: any) => any;
    reqAccountSummary: (reqId: any, group: any, tags: any) => any;
    reqAccountUpdates: (subscribe: any, acctCode: any) => any;
    reqAccountUpdatesMulti: (reqId: any, acctCode: any, modelCode: any, ledgerAndNLV: any) => any;
    reqAllOpenOrders: () => any;
    reqAutoOpenOrders: (bAutoBind: any) => any;
    reqContractDetails: (reqId: any, contract: any) => any;
    reqCurrentTime: () => any;
    reqExecutions: (reqId: any, filter: any) => any;
    reqFundamentalData: (reqId: any, contract: any, reportType: any) => any;
    reqGlobalCancel: () => any;
    reqHeadTimestamp: (reqId: any, contract: any, whatToShow: any, useRTH: any, formatDate: any) => void;
    reqSecDefOptParams: (reqId: any, underlyingSymbol: any, futFopExchange: any, underlyingSecType: any, underlyingConId: any) => any;
    reqHistoricalData: (tickerId: any, contract: any, endDateTime: any, durationStr: any, barSizeSetting: any, whatToShow: any, useRTH: any, formatDate: any, keepUpToDate: any) => any;
    reqHistoricalTicks: (tickerId: any, contract: any, startDateTime: any, endDateTime: any, numberOfTicks: any, whatToShow: any, useRTH: any, ignoreSize: any) => any;
    reqTickByTickData: (tickerId: any, contract: any, tickType: any, numberOfTicks: any, ignoreSize: any) => any;
    cancelTickByTickData: (tickerId: any) => any;
    reqIds: (numIds: any) => any;
    reqManagedAccts: () => any;
    reqMarketDataType: (marketDataType: any) => any;
    reqMktData: (tickerId: any, contract: any, genericTickList: any, snapshot: any, regulatorySnapshot: any) => any;
    reqMktDepth: (tickerId: any, contract: any, numRows: any) => any;
    reqNewsBulletins: (allMsgs: any) => any;
    reqOpenOrders: () => any;
    reqPositions: () => any;
    reqPositionsMulti: (reqId: any, account: any, modelCode: any) => any;
    reqRealTimeBars: (tickerId: any, contract: any, barSize: any, whatToShow: any, useRTH: any) => any;
    reqScannerParameters: () => any;
    reqScannerSubscription: (tickerId: any, subscription: any) => any;
    requestFA: (faDataType: any) => any;
    setServerLogLevel: (logLevel: any) => any;
    queryDisplayGroups: (reqId: any) => any;
    updateDisplayGroup: (reqId: any, contractInfo: any) => any;
    subscribeToGroupEvents: (reqId: any, groupId: any) => any;
    unsubscribeToGroupEvents: (reqId: any) => any;
}
export = IB;
