"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var assert_1 = __importDefault(require("assert"));
var events_1 = require("events");
var lodash_1 = __importDefault(require("lodash"));
var constants_1 = __importDefault(require("./constants"));
var controller_1 = __importDefault(require("./controller"));
var order_1 = __importDefault(require("./order"));
var contract_1 = __importDefault(require("./contract"));
var util_1 = __importDefault(require("./util"));
var IB = /** @class */ (function (_super) {
    __extends(IB, _super);
    function IB(options) {
        var _this = _super.call(this) || this;
        _this.contract = contract_1.default;
        _this.order = order_1.default;
        _this.util = util_1.default;
        _this._send = function () {
            var args = Array.prototype.slice.call(arguments);
            this._controller.schedule('api', {
                func: args[0],
                args: args.slice(1)
            });
        };
        _this.connect = function () {
            this._controller.schedule('connect');
            return this;
        };
        _this.disconnect = function () {
            this._controller.schedule('disconnect');
            return this;
        };
        _this.calculateImpliedVolatility = function (reqId, contract, optionPrice, underPrice) {
            this._send('calculateImpliedVolatility', reqId, contract, optionPrice, underPrice);
            return this;
        };
        _this.calculateOptionPrice = function (reqId, contract, volatility, underPrice) {
            this._send('calculateOptionPrice', reqId, contract, volatility, underPrice);
            return this;
        };
        _this.cancelAccountSummary = function (reqId) {
            assert_1.default(lodash_1.default.isNumber(reqId), '"reqId" must be an integer - ' + reqId);
            this._send('cancelAccountSummary', reqId);
            return this;
        };
        _this.cancelPositionsMulti = function (reqId) {
            assert_1.default(lodash_1.default.isNumber(reqId), '"reqId" must be an integer - ' + reqId);
            this._send('cancelPositionsMulti', reqId);
            return this;
        };
        _this.cancelAccountUpdatesMulti = function (reqId) {
            assert_1.default(lodash_1.default.isNumber(reqId), '"reqId" must be an integer - ' + reqId);
            this._send('cancelAccountUpdatesMulti', reqId);
            return this;
        };
        _this.cancelCalculateImpliedVolatility = function (reqId) {
            assert_1.default(lodash_1.default.isNumber(reqId), '"reqId" must be an integer - ' + reqId);
            this._send('cancelCalculateImpliedVolatility', reqId);
            return this;
        };
        _this.cancelCalculateOptionPrice = function (reqId) {
            assert_1.default(lodash_1.default.isNumber(reqId), '"reqId" must be an integer - ' + reqId);
            this._send('cancelCalculateOptionPrice', reqId);
            return this;
        };
        _this.cancelFundamentalData = function (reqId) {
            assert_1.default(lodash_1.default.isNumber(reqId), '"reqId" must be an integer - ' + reqId);
            this._send('cancelFundamentalData', reqId);
            return this;
        };
        _this.cancelHistoricalData = function (tickerId) {
            assert_1.default(lodash_1.default.isNumber(tickerId), '"tickerId" must be an integer - ' + tickerId);
            this._send('cancelHistoricalData', tickerId);
            return this;
        };
        _this.cancelMktData = function (tickerId) {
            assert_1.default(lodash_1.default.isNumber(tickerId), '"tickerId" must be an integer - ' + tickerId);
            this._send('cancelMktData', tickerId);
            return this;
        };
        _this.cancelMktDepth = function (tickerId) {
            assert_1.default(lodash_1.default.isNumber(tickerId), '"tickerId" must be an integer - ' + tickerId);
            this._send('cancelMktDepth', tickerId);
            return this;
        };
        _this.cancelNewsBulletins = function () {
            this._send('cancelNewsBulletins');
            return this;
        };
        _this.cancelOrder = function (id) {
            assert_1.default(lodash_1.default.isNumber(id), '"id" must be an integer - ' + id);
            this._send('cancelOrder', id);
            return this;
        };
        _this.cancelPositions = function () {
            this._send('cancelPositions');
            return this;
        };
        _this.cancelRealTimeBars = function (tickerId) {
            assert_1.default(lodash_1.default.isNumber(tickerId), '"tickerId" must be an integer - ' + tickerId);
            this._send('cancelRealTimeBars', tickerId);
            return this;
        };
        _this.cancelScannerSubscription = function (tickerId) {
            assert_1.default(lodash_1.default.isNumber(tickerId), '"tickerId" must be an integer - ' + tickerId);
            this._send('cancelScannerSubscription', tickerId);
            return this;
        };
        _this.exerciseOptions = function (tickerId, contract, exerciseAction, exerciseQuantity, account, override) {
            assert_1.default(lodash_1.default.isNumber(tickerId), '"tickerId" must be an integer - ' + tickerId);
            assert_1.default(lodash_1.default.isPlainObject(contract), '"contract" must be a plain object - ' + contract);
            assert_1.default(lodash_1.default.isNumber(exerciseAction), '"exerciseAction" must be an integer - ' + exerciseAction);
            assert_1.default(lodash_1.default.isNumber(exerciseQuantity), '"exerciseQuantity" must be an integer - ' + exerciseQuantity);
            assert_1.default(lodash_1.default.isString(account), '"account" must be a string - ' + account);
            assert_1.default(lodash_1.default.isNumber(override), '"override" must be an integer - ' + override);
            this._send('exerciseOptions', tickerId, contract, exerciseAction, exerciseQuantity, account, override);
            return this;
        };
        _this.placeOrder = function (id, contract, order) {
            assert_1.default(lodash_1.default.isNumber(id), '"id" must be an integer - ' + id);
            assert_1.default(lodash_1.default.isPlainObject(contract), '"contract" must be a plain object - ' + contract);
            assert_1.default(lodash_1.default.isPlainObject(order), '"order" must be a plain object - ' + order);
            this._send('placeOrder', id, contract, order);
            return this;
        };
        _this.replaceFA = function (faDataType, xml) {
            assert_1.default(lodash_1.default.isNumber(faDataType), '"faDataType" must be an integer - ' + faDataType);
            assert_1.default(lodash_1.default.isString(xml), '"xml" must be a string - ' + xml);
            this._send('replaceFA', faDataType, xml);
            return this;
        };
        _this.reqAccountSummary = function (reqId, group, tags) {
            assert_1.default(lodash_1.default.isNumber(reqId), '"reqId" must be an integer - ' + reqId);
            assert_1.default(lodash_1.default.isString(group), '"group" must be a string - ' + group);
            assert_1.default(lodash_1.default.isArray(tags) || lodash_1.default.isString(tags), '"tags" must be array or string - ' + tags);
            if (lodash_1.default.isArray(tags)) {
                tags = tags.join(',');
            }
            this._send('reqAccountSummary', reqId, group, tags);
            return this;
        };
        _this.reqAccountUpdates = function (subscribe, acctCode) {
            assert_1.default(lodash_1.default.isBoolean(subscribe), '"subscribe" must be a boolean - ' + subscribe);
            assert_1.default(lodash_1.default.isString(acctCode), '"acctCode" must be a string - ' + acctCode);
            this._send('reqAccountUpdates', subscribe, acctCode);
            return this;
        };
        _this.reqAccountUpdatesMulti = function (reqId, acctCode, modelCode, ledgerAndNLV) {
            assert_1.default(lodash_1.default.isNumber(reqId), '"reqId" must be an integer - ' + reqId);
            assert_1.default(lodash_1.default.isString(acctCode), '"acctCode" must be a string - ' + acctCode);
            assert_1.default(lodash_1.default.isString(modelCode) || lodash_1.default.isNull(modelCode), '"modelCode" must be a string or null - ' + modelCode);
            assert_1.default(lodash_1.default.isBoolean(ledgerAndNLV), '"ledgerAndNLV" must be a boolean - ' + ledgerAndNLV);
            this._send('reqAccountUpdatesMulti', reqId, acctCode, modelCode, ledgerAndNLV);
            return this;
        };
        _this.reqAllOpenOrders = function () {
            this._send('reqAllOpenOrders');
            return this;
        };
        _this.reqAutoOpenOrders = function (bAutoBind) {
            assert_1.default(lodash_1.default.isBoolean(bAutoBind), '"bAutoBind" must be a boolean - ' + bAutoBind);
            this._send('reqAutoOpenOrders', bAutoBind);
            return this;
        };
        _this.reqContractDetails = function (reqId, contract) {
            assert_1.default(lodash_1.default.isNumber(reqId), '"reqId" must be an integer - ' + reqId);
            assert_1.default(lodash_1.default.isPlainObject(contract), '"contract" must be a plain object - ' + contract);
            this._send('reqContractDetails', reqId, contract);
            return this;
        };
        _this.reqCurrentTime = function () {
            this._send('reqCurrentTime');
            return this;
        };
        _this.reqExecutions = function (reqId, filter) {
            assert_1.default(lodash_1.default.isNumber(reqId), '"reqId" must be an integer - ' + reqId);
            assert_1.default(lodash_1.default.isPlainObject(filter), '"filter" must be a plain object - ' + filter);
            this._send('reqExecutions', reqId, filter);
            return this;
        };
        _this.reqFundamentalData = function (reqId, contract, reportType) {
            assert_1.default(lodash_1.default.isNumber(reqId), '"reqId" must be an integer - ' + reqId);
            assert_1.default(lodash_1.default.isPlainObject(contract), '"contract" must be a plain object - ' + contract);
            assert_1.default(lodash_1.default.isString(reportType), '"reportType" must be a string - ' + reportType);
            this._send('reqFundamentalData', reqId, contract, reportType);
            return this;
        };
        _this.reqGlobalCancel = function () {
            this._send('reqGlobalCancel');
            return this;
        };
        _this.reqHeadTimestamp = function (reqId, contract, whatToShow, useRTH, formatDate) {
            assert_1.default(lodash_1.default.isNumber(reqId), '"reqId" must be an integer - ' + reqId);
            assert_1.default(lodash_1.default.isPlainObject(contract), '"contract" must be a plain object - ' + contract);
            assert_1.default(lodash_1.default.isString(whatToShow), '"whatToShow" must be a string - ' + whatToShow);
            assert_1.default(lodash_1.default.isNumber(useRTH), '"useRTH" must be an integer - ' + useRTH);
            assert_1.default(lodash_1.default.isNumber(formatDate), '"formatDate" must be an integer - ' + formatDate);
            this._send('reqHeadTimestamp', reqId, contract, whatToShow, useRTH, formatDate);
        };
        _this.reqSecDefOptParams = function (reqId, underlyingSymbol, futFopExchange, underlyingSecType, underlyingConId) {
            assert_1.default(lodash_1.default.isNumber(reqId), '"reqId" must be an integer - ' + reqId);
            assert_1.default(lodash_1.default.isString(underlyingSymbol), '"underlyingSymbol" must be a string - ' + underlyingSymbol);
            assert_1.default(lodash_1.default.isString(futFopExchange), '"futFopExchange" must be a string - ' + futFopExchange);
            assert_1.default(lodash_1.default.isString(futFopExchange), '"underlyingSecType" must be a string - ' + underlyingSecType);
            assert_1.default(lodash_1.default.isNumber(underlyingConId), '"underlyingConId" must be an integer - ' + underlyingConId);
            this._send('reqSecDefOptParams', reqId, underlyingSymbol, futFopExchange, underlyingSecType, underlyingConId);
            return this;
        };
        _this.reqHistoricalData = function (tickerId, contract, endDateTime, durationStr, barSizeSetting, whatToShow, useRTH, formatDate, keepUpToDate) {
            assert_1.default(lodash_1.default.isNumber(tickerId), '"tickerId" must be an integer - ' + tickerId);
            assert_1.default(lodash_1.default.isPlainObject(contract), '"contract" must be a plain object - ' + contract);
            assert_1.default(lodash_1.default.isString(endDateTime), '"endDateTime" must be a string - ' + endDateTime);
            assert_1.default(lodash_1.default.isString(durationStr), '"durationStr" must be a string - ' + durationStr);
            assert_1.default(lodash_1.default.isString(barSizeSetting), '"barSizeSetting" must be a string - ' + barSizeSetting);
            assert_1.default(lodash_1.default.isString(whatToShow), '"whatToShow" must be a string - ' + whatToShow);
            assert_1.default(lodash_1.default.isNumber(useRTH), '"useRTH" must be an integer - ' + useRTH);
            assert_1.default(lodash_1.default.isNumber(formatDate), '"formatDate" must be an integer - ' + formatDate);
            assert_1.default(lodash_1.default.isBoolean(keepUpToDate), '"keepUpToDate" must be an boolean - ' + keepUpToDate);
            this._send('reqHistoricalData', tickerId, contract, endDateTime, durationStr, barSizeSetting, whatToShow, useRTH, formatDate, keepUpToDate);
            return this;
        };
        _this.reqHistoricalTicks = function (tickerId, contract, startDateTime, endDateTime, numberOfTicks, whatToShow, useRTH, ignoreSize) {
            assert_1.default(lodash_1.default.isNumber(tickerId), '"tickerId" must be an integer - ' + tickerId);
            assert_1.default(lodash_1.default.isPlainObject(contract), '"contract" must be a plain object - ' + contract);
            if (startDateTime && endDateTime || !startDateTime && !endDateTime) {
                assert_1.default.fail('specify one of "startDateTime" or "endDateTime" (as a string) but not both - ' + startDateTime + ':' + endDateTime);
            }
            assert_1.default(lodash_1.default.isNumber(numberOfTicks), '"numberOfTicks" must be a number - ' + numberOfTicks);
            assert_1.default(lodash_1.default.isString(whatToShow), '"whatToShow" must be a string - ' + whatToShow);
            assert_1.default(lodash_1.default.isNumber(useRTH), '"useRTH" must be an integer - ' + useRTH);
            assert_1.default(lodash_1.default.isBoolean(ignoreSize), '"ignoreSize" must be an boolean - ' + ignoreSize);
            this._send('reqHistoricalTicks', tickerId, contract, startDateTime, endDateTime, numberOfTicks, whatToShow, useRTH, ignoreSize);
            return this;
        };
        _this.reqTickByTickData = function (tickerId, contract, tickType, numberOfTicks, ignoreSize) {
            assert_1.default(lodash_1.default.isNumber(tickerId), '"tickerId" must be an integer - ' + tickerId);
            assert_1.default(lodash_1.default.isPlainObject(contract), '"contract" must be a plain object - ' + contract);
            assert_1.default(lodash_1.default.isString(tickType), '"tickType" must be a string - ' + tickType);
            assert_1.default(lodash_1.default.isNumber(numberOfTicks), '"numberOfTicks" must be a number - ' + numberOfTicks);
            assert_1.default(lodash_1.default.isBoolean(ignoreSize), '"ignoreSize" must be an boolean - ' + ignoreSize);
            this._send('reqTickByTickData', tickerId, contract, tickType, numberOfTicks, ignoreSize);
            return this;
        };
        _this.cancelTickByTickData = function (tickerId) {
            assert_1.default(lodash_1.default.isNumber(tickerId), '"tickerId" must be an integer - ' + tickerId);
            this._send('cancelTickByTickData', tickerId);
            return this;
        };
        _this.reqIds = function (numIds) {
            assert_1.default(lodash_1.default.isNumber(numIds), '"numIds" must be an integer - ' + numIds);
            this._send('reqIds', numIds);
            return this;
        };
        _this.reqManagedAccts = function () {
            this._send('reqManagedAccts');
            return this;
        };
        _this.reqMarketDataType = function (marketDataType) {
            assert_1.default(lodash_1.default.isNumber(marketDataType), '"marketDataType" must be an integer - ' + marketDataType);
            this._send('reqMarketDataType', marketDataType);
            return this;
        };
        _this.reqMktData = function (tickerId, contract, genericTickList, snapshot, regulatorySnapshot) {
            assert_1.default(lodash_1.default.isNumber(tickerId), '"tickerId" must be an integer - ' + tickerId);
            assert_1.default(lodash_1.default.isPlainObject(contract), '"contract" must be a plain object - ' + contract);
            assert_1.default(lodash_1.default.isString(genericTickList), '"genericTickList" must be a string - ' + genericTickList);
            assert_1.default(lodash_1.default.isBoolean(snapshot), '"snapshot" must be a boolean - ' + snapshot);
            assert_1.default(lodash_1.default.isBoolean(regulatorySnapshot), '"regulatorySnapshot" must be a boolean - ' + regulatorySnapshot);
            this._send('reqMktData', tickerId, contract, genericTickList, snapshot, regulatorySnapshot);
            return this;
        };
        _this.reqMktDepth = function (tickerId, contract, numRows) {
            assert_1.default(lodash_1.default.isNumber(tickerId), '"tickerId" must be an integer - ' + tickerId);
            assert_1.default(lodash_1.default.isPlainObject(contract), '"contract" must be a plain object - ' + contract);
            assert_1.default(lodash_1.default.isNumber(numRows), '"numRows" must be an integer - ' + numRows);
            this._send('reqMktDepth', tickerId, contract, numRows);
            return this;
        };
        _this.reqNewsBulletins = function (allMsgs) {
            assert_1.default(lodash_1.default.isBoolean(allMsgs), '"allMsgs" must be a boolean - ' + allMsgs);
            this._send('reqNewsBulletins', allMsgs);
            return this;
        };
        _this.reqOpenOrders = function () {
            this._send('reqOpenOrders');
            return this;
        };
        _this.reqPositions = function () {
            this._send('reqPositions');
            return this;
        };
        // input params account here is acctCode, we name it account to be consistent with IB document
        _this.reqPositionsMulti = function (reqId, account, modelCode) {
            assert_1.default(lodash_1.default.isNumber(reqId), '"reqId" must be an integer - ' + reqId);
            assert_1.default(lodash_1.default.isString(account), '"account" must be a string - ' + account);
            assert_1.default(lodash_1.default.isString(modelCode) || lodash_1.default.isNull(modelCode), '"modelCode" must be a string or null - ' + modelCode);
            this._send('reqPositionsMulti', reqId, account, modelCode);
            return this;
        };
        _this.reqRealTimeBars = function (tickerId, contract, barSize, whatToShow, useRTH) {
            assert_1.default(lodash_1.default.isNumber(tickerId), '"tickerId" must be an integer - ' + tickerId);
            assert_1.default(lodash_1.default.isPlainObject(contract), '"contract" must be a plain object - ' + contract);
            assert_1.default(lodash_1.default.isNumber(barSize), '"barSize" must be an integer - ' + barSize);
            assert_1.default(lodash_1.default.isString(whatToShow), '"whatToShow" must be a string - ' + whatToShow);
            assert_1.default(lodash_1.default.isBoolean(useRTH), '"useRTH" must be a boolean - ' + useRTH);
            this._send('reqRealTimeBars', tickerId, contract, barSize, whatToShow, useRTH);
            return this;
        };
        _this.reqScannerParameters = function () {
            this._send('reqScannerParameters');
            return this;
        };
        _this.reqScannerSubscription = function (tickerId, subscription) {
            assert_1.default(lodash_1.default.isNumber(tickerId), '"tickerId" must be an integer - ' + tickerId);
            assert_1.default(lodash_1.default.isPlainObject(subscription), '"subscription" must be a plain object - ' + subscription);
            this._send('reqScannerSubscription', tickerId, subscription);
            return this;
        };
        _this.requestFA = function (faDataType) {
            assert_1.default(lodash_1.default.isNumber(faDataType), '"faDataType" must be an integer - ' + faDataType);
            this._send('requestFA', faDataType);
            return this;
        };
        _this.setServerLogLevel = function (logLevel) {
            assert_1.default(lodash_1.default.isNumber(logLevel), '"logLevel" must be an integer - ' + logLevel);
            this._send('setServerLogLevel', logLevel);
            return this;
        };
        _this.queryDisplayGroups = function (reqId) {
            assert_1.default(lodash_1.default.isNumber(reqId), '"reqId" must be an integer - ' + reqId);
            this._send('queryDisplayGroups', reqId);
            return this;
        };
        _this.updateDisplayGroup = function (reqId, contractInfo) {
            assert_1.default(lodash_1.default.isNumber(reqId), '"reqId" must be an integer - ' + reqId);
            assert_1.default(lodash_1.default.isString(contractInfo), '"contractInfo" must be an string - ' + contractInfo);
            this._send('updateDisplayGroup', reqId, contractInfo);
            return this;
        };
        _this.subscribeToGroupEvents = function (reqId, groupId) {
            assert_1.default(lodash_1.default.isNumber(reqId), '"reqId" must be an integer - ' + reqId);
            assert_1.default(lodash_1.default.isString(groupId), '"groupId" must be an integer - ' + groupId);
            this._send('subscribeToGroupEvents', reqId, groupId);
            return this;
        };
        _this.unsubscribeToGroupEvents = function (reqId) {
            assert_1.default(lodash_1.default.isNumber(reqId), '"reqId" must be an integer - ' + reqId);
            this._send('unsubscribeToGroupEvents', reqId);
            return this;
        };
        _this._controller = new controller_1.default(_this, options);
        _this.on('error', function () { });
        return _this;
    }
    return IB;
}(events_1.EventEmitter));
// Attach constants.
lodash_1.default.keys(constants_1.default).forEach(function (key) {
    Object.defineProperty(IB.prototype, key, {
        get: function () {
            return constants_1.default[key];
        }
    });
    Object.defineProperty(IB, key, {
        get: function () {
            return constants_1.default[key];
        }
    });
});
module.exports = IB;
//# sourceMappingURL=index.js.map