{"version":3,"file":"AccountSummary.js","sourceRoot":"","sources":["../../src/account/AccountSummary.ts"],"names":[],"mappings":"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","sourcesContent":["import includes from 'lodash/includes';\nimport isEmpty from 'lodash/isEmpty';\nimport {LIVE_ACCOUNT_IDS} from '../config';\nimport IBKRConnection from '../connection/IBKRConnection';\nimport {IBKREVENTS, IbkrEvents, publishDataToTopic} from '../events';\nimport {log} from '../log';\nimport {Portfolios} from '../portfolios';\nimport {getRadomReqId} from '../_utils/text.utils';\nimport {IBKRAccountSummary} from './account-summary.interfaces';\n\nconst appEvents = IbkrEvents.Instance;\n\nexport class AccountSummary {\n    ib: any;\n    accountReady = false;\n    tickerId = getRadomReqId();\n    AccountId;\n    accountSummary: IBKRAccountSummary = {} as any;\n    private static _instance: AccountSummary;\n\n    public static get Instance(): AccountSummary {\n        return this._instance || (this._instance = new this());\n    }\n\n    private constructor() {\n        this.ib = IBKRConnection.Instance.getIBKR();\n    }\n\n    public init(): void {\n        const self = this;\n\n        const ib = IBKRConnection.Instance.getIBKR();\n\n        self.ib = ib;\n\n        // Record values from here\n        ib.on('accountSummary', (reqId, account, tag, value, currency) => {\n            self.tickerId = reqId;\n            self.AccountId = account;\n            self.accountSummary.AccountId = account;\n            self.accountSummary[tag] = value; // set the account value\n            self.accountSummary.Currency = currency; // always set the account currency\n            // log('accountSummaryEnd', { account, tag, value, });\n        });\n\n        // Return values from here\n        ib.once('accountSummaryEnd', () => {\n            const {AccountId = 'unknown', tickerId, accountReady, accountSummary} = self;\n\n            log('accountSummaryEnd', {AccountId, tickerId, accountReady});\n\n            ib.cancelAccountSummary(tickerId);\n\n            publishDataToTopic({\n                topic: IBKREVENTS.ON_ACCOUNT_SUMMARY,\n                data: accountSummary,\n            });\n\n            self.accountReady = true;\n        });\n\n        self.reqAccountSummary();\n    }\n\n    /**\n     * reqAccountSummary\n     */\n    public reqAccountSummary = (): void => {\n        // Request Account summary from here\n        this.ib.reqAccountSummary(this.tickerId, 'All', [\n            'AccountType',\n            'NetLiquidation',\n            'TotalCashValue',\n            'SettledCash',\n            'AccruedCash',\n            'BuyingPower',\n            'EquityWithLoanValue',\n            'PreviousEquityWithLoanValue',\n            'GrossPositionValue',\n            'RegTEquity',\n            'RegTMargin',\n            'SMA',\n            'InitMarginReq',\n            'MaintMarginReq',\n            'AvailableFunds',\n            'ExcessLiquidity',\n            'Cushion',\n            'FullInitMarginReq',\n            'FullMaintMarginReq',\n            'FullAvailableFunds',\n            'FullExcessLiquidity',\n            'LookAheadNextChange',\n            'LookAheadInitMarginReq',\n            'LookAheadMaintMarginReq',\n            'LookAheadAvailableFunds',\n            'LookAheadExcessLiquidity',\n            'HighestSeverity',\n            'DayTradesRemaining',\n            'Leverage',\n        ]);\n    };\n\n    /**\n     * initialiseDep\n     */\n    public initialiseDep(): void {\n        Portfolios.Instance /*  */;\n    } /*  */\n\n    /**\n     * isLiveAccount\n     * Check whether this is the live account\n     */\n    public isLiveAccount(): boolean {\n        return includes(LIVE_ACCOUNT_IDS, this.AccountId);\n    }\n\n    /**\n     * getAccountSummary\n     */\n    public getAccountSummary(): Promise<IBKRAccountSummary> {\n        const {accountSummary, reqAccountSummary} = this;\n        return new Promise((resolve) => {\n            if (!isEmpty(accountSummary)) {\n                return resolve(accountSummary);\n            }\n\n            // listen for account summary\n            const handleAccountSummary = (accountSummaryData) => {\n                appEvents.off(IBKREVENTS.ON_ACCOUNT_SUMMARY, handleAccountSummary);\n                resolve(accountSummaryData);\n            };\n            appEvents.on(IBKREVENTS.ON_ACCOUNT_SUMMARY, handleAccountSummary);\n\n            reqAccountSummary();\n        });\n    }\n}\n\nexport default AccountSummary;\n"]}