{"version":3,"file":"HandleError.js","sourceRoot":"","sources":["../../src/events/HandleError.ts"],"names":[],"mappings":";;;;;AAAA,4CAA6C;AAC7C,2DAAqC;AACrC,8BAA+B;AAE/B;;;;;;;;GAQG;AACH,SAAgB,mBAAmB,CAC/B,KAAa,EACb,YAAsB;AACtB,wDAAwD;AACxD,UAAoB;IAEpB,IAAI,iBAAO,CAAC,YAAY,CAAC,EAAE;QACvB,OAAO,cAAO,CAAC,CAAC;KACnB;IAED,2CAA2C;IAC3C,YAAY,GAAG,YAAY,CAAC,GAAG,CAAC,UAAC,EAAE,IAAK,OAAA,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE,EAAxB,CAAwB,CAAC,CAAC;IAElE,IAAM,EAAE,GAAG,2BAAc,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;IAE7C,IAAM,WAAW,GAAG,UAAC,KAAK,EAAE,SAAS;QACjC,IAAM,cAAc,GAAG,SAAS,IAAI,SAAS,CAAC,EAAE,CAAC;QAEjD,IAAI,cAAc,KAAK,KAAK,EAAE;YAC1B,aAAO,CAAC,kDAAkD,EAAE,KAAK,CAAC,CAAC;YACnE,UAAU,EAAE,CAAC;SAChB;QAED,wBAAwB;QACxB,IAAM,YAAY,GAAG,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;QAEpE,IAAM,OAAO,GAAG,YAAY,CAAC,IAAI,CAAC,UAAC,MAAM,IAAK,OAAA,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,EAA7B,CAA6B,CAAC,CAAC;QAE7E,IAAI,OAAO,EAAE;YACT,aAAO,CAAC,gDAAgD,EAAE,YAAY,CAAC,CAAC;YACxE,UAAU,EAAE,CAAC;SAChB;IACL,CAAC,CAAC;IAEF,EAAE,CAAC,EAAE,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;IAE5B,iBAAiB;IACjB,OAAO;QACH,EAAE,CAAC,GAAG,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;IACjC,CAAC,CAAC;AACN,CAAC;AAxCD,kDAwCC","sourcesContent":["import {IBKRConnection} from '../connection';\nimport isEmpty from 'lodash/isEmpty';\nimport {verbose} from '../log';\n\n/**\n * Assuming IBKR returns predictable errors\n * Check if errors thrown match the targetError,\n * @param targetErrors - target strings,\n * @param catchError - function to stop/tell caller that targetErrors where matched\n *\n * @returns () => void // remove listener function\n * @important always call the returned function to remove listeners and avoid memory leaks\n */\nexport function handleEventfulError(\n    reqId: number,\n    targetErrors: string[],\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    catchError: Function\n): () => void {\n    if (isEmpty(targetErrors)) {\n        return () => {};\n    }\n\n    // convert all targeted errors to lowercase\n    targetErrors = targetErrors.map((er) => (er || '').toLowerCase());\n\n    const ib = IBKRConnection.Instance.getIBKR();\n\n    const handleError = (error, errorData) => {\n        const reqIdFromError = errorData && errorData.id;\n\n        if (reqIdFromError === reqId) {\n            verbose('handleEventfulError > handleError.reqIdFromError', reqId);\n            catchError();\n        }\n\n        // message to lower case\n        const errorMessage = ((error && error.message) || '').toLowerCase();\n\n        const isError = targetErrors.some((tError) => errorMessage.includes(tError));\n\n        if (isError) {\n            verbose('handleEventfulError > handleError.errorMessage', errorMessage);\n            catchError();\n        }\n    };\n\n    ib.on('error', handleError);\n\n    // return remover\n    return () => {\n        ib.off('error', handleError);\n    };\n}\n"]}