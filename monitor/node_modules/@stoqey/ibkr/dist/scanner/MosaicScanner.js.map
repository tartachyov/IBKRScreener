{"version":3,"file":"MosaicScanner.js","sourceRoot":"","sources":["../../src/scanner/MosaicScanner.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AACA,gFAA0D;AAC1D,mDAAmD;AAGnD;IAGI;QAEA;;WAEG;QACI,eAAU,GAAG,UAAC,IAAgB;YACjC,IAAM,EAAE,GAAG,wBAAc,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;YACtC,IAAA,oBAAkB,EAAlB,uCAAkB,EAAE,gCAAY,EAAE,gCAAY,EAAE,wBAAQ,EAAE,sCAAe,CAAS;YACzF,IAAM,YAAY,GAAG,0BAAa,EAAE,CAAC;YAErC,IAAM,WAAW,GAAwB,EAAE,CAAC;YAE5C,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO;gBACvB,6DAA6D;gBAC7D,IAAM,iBAAiB,GAAG,UAAC,QAAQ;oBAC/B,EAAE,CAAC,GAAG,CAAC,aAAa,EAAE,iBAAiB,CAAC,CAAC;oBACzC,OAAO,CAAC,WAAW,CAAC,CAAC;gBACzB,CAAC,CAAC;gBAEF,EAAE,CAAC,EAAE,CACD,aAAa,EACb,UAAC,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,UAAU,EAAE,OAAO;oBAC/D,WAAW,CAAC,IAAI,qBACZ,IAAI,MAAA,IACD,CAAC,CAAC,QAAQ,IAAI,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,KACzC,QAAQ,UAAA;wBACR,SAAS,WAAA;wBACT,UAAU,YAAA;wBACV,OAAO,SAAA,IACT,CAAC;gBACP,CAAC,CACJ,CAAC;gBAEF,EAAE,CAAC,IAAI,CAAC,gBAAgB,EAAE,iBAAiB,CAAC,CAAC;gBAE7C,EAAE,CAAC,sBAAsB,CAAC,YAAY,EAAE;oBACpC,UAAU,YAAA;oBACV,YAAY,cAAA;oBACZ,YAAY,cAAA;oBACZ,QAAQ,UAAA;oBACR,eAAe,iBAAA;iBAClB,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC,CAAC;IA3Ca,CAAC;IA4CpB,oBAAC;AAAD,CAAC,AA/CD,IA+CC;AA/CY,sCAAa;AAiD1B,kBAAe,aAAa,CAAC","sourcesContent":["import ibkr from '@stoqey/ib';\nimport IBKRConnection from '../connection/IBKRConnection';\nimport {getRadomReqId} from '../_utils/text.utils';\nimport {ScanMarket, MosaicScannerData} from './scanner.interface';\n\nexport class MosaicScanner {\n    ib: ibkr;\n\n    constructor() {}\n\n    /**\n     * scanMarket\n     */\n    public scanMarket = (args: ScanMarket): Promise<MosaicScannerData[]> => {\n        const ib = IBKRConnection.Instance.getIBKR();\n        const {instrument = 'STK', locationCode, numberOfRows, scanCode, stockTypeFilter} = args;\n        const randomTicker = getRadomReqId();\n\n        const scansedData: MosaicScannerData[] = [];\n\n        return new Promise((resolve) => {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const handleScannerData = (tickerId) => {\n                ib.off('scannerData', handleScannerData);\n                resolve(scansedData);\n            };\n\n            ib.on(\n                'scannerData',\n                (tickerId, rank, contract, distance, benchmark, projection, legsStr) => {\n                    scansedData.push({\n                        rank,\n                        ...((contract && contract.summary) || {}),\n                        distance,\n                        benchmark,\n                        projection,\n                        legsStr,\n                    });\n                }\n            );\n\n            ib.once('scannerDataEnd', handleScannerData);\n\n            ib.reqScannerSubscription(randomTicker, {\n                instrument,\n                locationCode,\n                numberOfRows,\n                scanCode,\n                stockTypeFilter,\n            });\n        });\n    };\n}\n\nexport default MosaicScanner;\n"]}