"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var IBKRConnection_1 = __importDefault(require("../connection/IBKRConnection"));
var text_utils_1 = require("../_utils/text.utils");
var MosaicScanner = /** @class */ (function () {
    function MosaicScanner() {
        /**
         * scanMarket
         */
        this.scanMarket = function (args) {
            var ib = IBKRConnection_1.default.Instance.getIBKR();
            var _a = args.instrument, instrument = _a === void 0 ? 'STK' : _a, locationCode = args.locationCode, numberOfRows = args.numberOfRows, scanCode = args.scanCode, stockTypeFilter = args.stockTypeFilter;
            var randomTicker = text_utils_1.getRadomReqId();
            var scansedData = [];
            return new Promise(function (resolve) {
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                var handleScannerData = function (tickerId) {
                    ib.off('scannerData', handleScannerData);
                    resolve(scansedData);
                };
                ib.on('scannerData', function (tickerId, rank, contract, distance, benchmark, projection, legsStr) {
                    scansedData.push(__assign(__assign({ rank: rank }, ((contract && contract.summary) || {})), { distance: distance,
                        benchmark: benchmark,
                        projection: projection,
                        legsStr: legsStr }));
                });
                ib.once('scannerDataEnd', handleScannerData);
                ib.reqScannerSubscription(randomTicker, {
                    instrument: instrument,
                    locationCode: locationCode,
                    numberOfRows: numberOfRows,
                    scanCode: scanCode,
                    stockTypeFilter: stockTypeFilter,
                });
            });
        };
    }
    return MosaicScanner;
}());
exports.MosaicScanner = MosaicScanner;
exports.default = MosaicScanner;
//# sourceMappingURL=MosaicScanner.js.map