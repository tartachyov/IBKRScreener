"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var override_1 = require("../overrides/override");
var interval_model_1 = require("./interval.model");
var IntervalCollection = /** @class */ (function () {
    function IntervalCollection() {
        this._intervalCollection = [];
    }
    IntervalCollection.prototype.add = function (handler, interval) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var newInterval = new interval_model_1.IntervalModel(handler, interval, args);
        var id = override_1.originalSetInterval.apply(global, [this._getWrappedHandler(newInterval.uuid, handler), interval, args]);
        newInterval.id = id;
        this._intervalCollection.push(newInterval);
        return id;
    };
    IntervalCollection.prototype._getWrappedHandler = function (intervalUuid, handler) {
        var _this = this;
        return (function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            _this._intervalCollection[_this._getIntervalIndexByUuid(intervalUuid)].status = interval_model_1.IntervalStatus.Completed;
            return handler.apply(global, args);
        });
    };
    IntervalCollection.prototype._getIntervalIndexByUuid = function (uuid) {
        for (var i = 0; i < this._intervalCollection.length; i++) {
            if (this._intervalCollection[i].uuid === uuid) {
                return i;
            }
        }
        return -1;
    };
    IntervalCollection.prototype.remove = function (id) {
        var intervalIndex = this._getIntervalIndexById(id);
        if (intervalIndex !== -1) {
            this._intervalCollection.splice(intervalIndex, 1);
        }
        return override_1.originalClearInterval.apply(global, [id]);
    };
    IntervalCollection.prototype.removeByUuid = function (uuid) {
        var currentIntervalIndex = this._getIntervalIndexByUuid(uuid);
        var currentIntervalModel = this._intervalCollection[currentIntervalIndex];
        if (currentIntervalModel && currentIntervalModel.id) {
            return this.remove(currentIntervalModel.id);
        }
        return null;
    };
    IntervalCollection.prototype.get = function (interval) {
        return this._intervalCollection[this._getIntervalIndexById(interval)];
    };
    IntervalCollection.prototype.getAll = function () {
        return this._intervalCollection;
    };
    IntervalCollection.prototype.getByIndex = function (index) {
        return this._intervalCollection[index];
    };
    IntervalCollection.prototype.removeAll = function () {
        this._intervalCollection.forEach(function (interval) {
            override_1.originalClearInterval.apply(global, [interval.id]);
        });
        this._intervalCollection = [];
    };
    IntervalCollection.prototype._getIntervalIndexById = function (intervalId) {
        return this._intervalCollection.findIndex(function (i) { return i.id === intervalId; });
    };
    return IntervalCollection;
}());
exports.IntervalCollection = IntervalCollection;
//# sourceMappingURL=interval-collection.model.js.map