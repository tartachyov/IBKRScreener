"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var includes_1 = __importDefault(require("lodash/includes"));
var moment_1 = __importDefault(require("moment"));
var isEmpty_1 = __importDefault(require("lodash/isEmpty"));
var text_utils_1 = require("../_utils/text.utils");
var IBKRConnection_1 = __importDefault(require("../connection/IBKRConnection"));
var events_1 = require("../events");
var log_1 = require("../log");
var history_utils_1 = require("./history.utils");
var HandleError_1 = require("../events/HandleError");
var appEvents = events_1.IbkrEvents.Instance;
var HistoricalData = /** @class */ (function () {
    function HistoricalData() {
        var _this = this;
        this.historyData = {};
        this.historyDataDump = {};
        this.symbolsWithTicker = [];
        this.reqHistoryData = function (args, params) {
            var tickerId = args.tickerId, symbol = args.symbol;
            log_1.log("HistoricalData.reqHistoryData", "Request historyData " + symbol);
            // Save this symbol in this class
            _this.symbolsWithTicker.push(args);
            var contract = params.contract, endDateTime = params.endDateTime, durationStr = params.durationStr, barSizeSetting = params.barSizeSetting, whatToShow = params.whatToShow;
            //                   tickerId, contract,                    endDateTime, durationStr,             barSizeSetting,             whatToShow,             useRTH, formatDate, keepUpToDate
            _this.ib.reqHistoricalData(tickerId, contract, endDateTime, durationStr || '1800 S', barSizeSetting || '1 secs', whatToShow || 'TRADES', 1, 1, false);
        };
        /**
         * Get historical data using events
         */
        this.getHistoricalData = function (args) {
            events_1.publishDataToTopic({
                topic: events_1.IBKREVENTS.GET_MARKET_DATA,
                data: args,
            });
        };
        /**
         * ReqHistoricalData Async Promise
         */
        this.reqHistoricalData = function (args) {
            var self = _this;
            var ib = self.ib;
            var tickerId = text_utils_1.getRadomReqId();
            return new Promise(function (resolve) {
                var done = false;
                var marketData = [];
                var symbol = args.symbol, _a = args.endDateTime, endDateTime = _a === void 0 ? '' : _a, _b = args.durationStr, durationStr = _b === void 0 ? '1 D' : _b, _c = args.barSizeSetting, barSizeSetting = _c === void 0 ? '1 min' : _c, _d = args.whatToShow, whatToShow = _d === void 0 ? 'ASK' : _d;
                // parse contract
                var ogContract = args.contract;
                var contract = ogContract;
                if (typeof ogContract === 'string' || !ogContract) {
                    // make it a stock by default
                    contract = ib.contract.stock(symbol, 'SMART', 'USD');
                }
                var endhistoricalData = function (tickerId) {
                    if (!done) {
                        done = true;
                        // remove listeners
                        ib.off('historicalData', onHistoricalData);
                        eventfulError(); // close eventful errors
                        // cancel market data
                        tickerId && ib.cancelHistoricalData(tickerId); // tickerId
                        var collectedData = history_utils_1.sortedMarketData(marketData);
                        resolve(collectedData);
                    }
                };
                var onHistoricalData = function (reqId, date, open, high, low, close, volume, barCount, WAP, hasGaps) {
                    if (includes_1.default([-1], open)) {
                        endhistoricalData(reqId);
                    }
                    else {
                        var currentSymbol = tickerId === reqId;
                        var dateFormat = 'YYYYMMDD hh:mm:ss';
                        var newEntry = {
                            reqId: reqId,
                            date: moment_1.default(date, dateFormat).toDate(),
                            open: open,
                            high: high,
                            low: low,
                            close: close,
                            volume: volume,
                            barCount: barCount,
                            WAP: WAP,
                            hasGaps: hasGaps,
                        };
                        if (currentSymbol) {
                            marketData.push(newEntry);
                        }
                    }
                };
                ib.on('historicalData', onHistoricalData);
                // TODO all more error messages
                // handleError
                var eventfulError = HandleError_1.handleEventfulError(tickerId, [
                    "Historical data request pacing violation",
                    "No historical market data for " + symbol,
                    "The contract description specified for " + symbol + " is ambiguous.",
                ], endhistoricalData);
                //                   tickerId, contract, endDateTime, durationStr,             barSizeSetting,             whatToShow,             useRTH, formatDate, keepUpToDate
                ib.reqHistoricalData(tickerId, contract, endDateTime, durationStr || '1800 S', barSizeSetting || '1 secs', whatToShow || 'TRADES', 1, 1, false);
            });
        };
        var that = this;
        var ib = IBKRConnection_1.default.Instance.getIBKR();
        this.ib = ib;
        var endhistoricalData = function (tickerId) {
            var _a;
            ib.cancelHistoricalData(tickerId); // tickerId
            var currentSymbol = _this.symbolsWithTicker.find(function (y) { return y.tickerId === tickerId; });
            if (isEmpty_1.default(currentSymbol)) {
                return null;
            }
            var allCollectedData = (_this.historyDataDump[tickerId] && _this.historyDataDump[tickerId].data) || [];
            // sort data by date
            var collectedData = history_utils_1.sortedMarketData(allCollectedData);
            _this.historyData = __assign(__assign({}, _this.historyData), (_a = {}, _a[currentSymbol.symbol] = collectedData, _a));
            // Publish data to Random Generator
            var dataToPublish = {
                symbol: currentSymbol.symbol,
                marketData: collectedData,
            };
            events_1.publishDataToTopic({
                topic: events_1.IBKREVENTS.ON_MARKET_DATA,
                data: dataToPublish,
            });
            delete _this.historyDataDump[tickerId];
        };
        ib.on('historicalData', function (reqId, date, open, high, low, close, volume, barCount, WAP, hasGaps) {
            var _a;
            if (includes_1.default([-1], open)) {
                endhistoricalData(reqId);
            }
            else {
                var currentSymbol = _this.symbolsWithTicker.find(function (y) { return y.tickerId === reqId; });
                var dateFormat = 'YYYYMMDD hh:mm:ss';
                var newEntry = {
                    reqId: reqId,
                    date: moment_1.default(date, dateFormat).toDate(),
                    open: open,
                    high: high,
                    low: low,
                    close: close,
                    volume: volume,
                    barCount: barCount,
                    WAP: WAP,
                    hasGaps: hasGaps,
                };
                if (!isEmpty_1.default(currentSymbol)) {
                    // Save into dumpData
                    _this.historyDataDump = __assign(__assign({}, _this.historyDataDump), (_a = {}, _a[reqId] = __assign(__assign({}, (_this.historyDataDump[reqId] || null)), { data: __spreadArrays(((_this.historyDataDump[reqId] &&
                            _this.historyDataDump[reqId].data) ||
                            []), [
                            newEntry,
                        ]) }), _a));
                }
            }
        });
        // listen for any historicalData event
        appEvents.on(events_1.IBKREVENTS.GET_MARKET_DATA, function (args) {
            // request History Data
            var symbol = args.symbol, 
            // contract = [symbol, 'SMART', 'USD'],
            _a = args.endDateTime, 
            // contract = [symbol, 'SMART', 'USD'],
            endDateTime = _a === void 0 ? '' : _a, _b = args.durationStr, durationStr = _b === void 0 ? '1 D' : _b, _c = args.barSizeSetting, barSizeSetting = _c === void 0 ? '1 min' : _c, _d = args.whatToShow, whatToShow = _d === void 0 ? 'ASK' : _d;
            log_1.log("on history data " + symbol);
            if (isEmpty_1.default(symbol)) {
                return;
            }
            // parse contract
            var ogContract = args.contract;
            var contract = ogContract;
            if (typeof ogContract === 'string' || !ogContract) {
                // make it a stock by default
                contract = ib.contract.stock(symbol, 'SMART', 'USD');
            }
            that.reqHistoryData({
                symbol: symbol,
                tickerId: text_utils_1.getRadomReqId(),
            }, {
                contract: contract,
                endDateTime: endDateTime,
                durationStr: durationStr,
                barSizeSetting: barSizeSetting,
                whatToShow: whatToShow,
            });
        });
    }
    Object.defineProperty(HistoricalData, "Instance", {
        get: function () {
            return this._instance || (this._instance = new this());
        },
        enumerable: true,
        configurable: true
    });
    return HistoricalData;
}());
exports.HistoricalData = HistoricalData;
exports.default = HistoricalData;
//# sourceMappingURL=history.data.js.map