{"version":3,"file":"history.data.js","sourceRoot":"","sources":["../../src/history/history.data.ts"],"names":[],"mappings":"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","sourcesContent":["import includes from 'lodash/includes';\nimport moment from 'moment';\nimport isEmpty from 'lodash/isEmpty';\nimport ibkr from '@stoqey/ib';\nimport {getRadomReqId} from '../_utils/text.utils';\nimport IBKRConnection from '../connection/IBKRConnection';\nimport {IbkrEvents, publishDataToTopic, IBKREVENTS} from '../events';\nimport {\n    HistoryData,\n    SymbolWithTicker,\n    ReqHistoricalData,\n    WhatToShow,\n    BarSizeSetting,\n} from './history.interfaces';\nimport {log} from '../log';\nimport {sortedMarketData} from './history.utils';\nimport {handleEventfulError} from '../events/HandleError';\n\nconst appEvents = IbkrEvents.Instance;\n\ninterface GetMarketData {\n    symbol: string;\n    contract?: Record<string, any> | string;\n    endDateTime?: string;\n    durationStr?: string;\n    barSizeSetting?: BarSizeSetting;\n    whatToShow?: WhatToShow;\n}\n\nexport class HistoricalData {\n    ib: ibkr;\n    historyData: {[x: string]: HistoryData[]} = {};\n    historyDataDump: {[x: string]: {data: any[]}} = {};\n\n    symbolsWithTicker: {tickerId: number; symbol: string}[] = [];\n\n    private static _instance: HistoricalData;\n\n    public static get Instance(): HistoricalData {\n        return this._instance || (this._instance = new this());\n    }\n\n    private constructor() {\n        const that = this;\n\n        const ib = IBKRConnection.Instance.getIBKR();\n        this.ib = ib;\n\n        const endhistoricalData = (tickerId) => {\n            ib.cancelHistoricalData(tickerId); // tickerId\n\n            const currentSymbol = this.symbolsWithTicker.find((y) => y.tickerId === tickerId);\n\n            if (isEmpty(currentSymbol)) {\n                return null;\n            }\n\n            const allCollectedData =\n                (this.historyDataDump[tickerId] && this.historyDataDump[tickerId].data) || [];\n\n            // sort data by date\n            const collectedData = sortedMarketData(allCollectedData);\n\n            this.historyData = {\n                ...this.historyData,\n                [currentSymbol.symbol]: collectedData,\n            };\n\n            // Publish data to Random Generator\n            const dataToPublish: {\n                symbol: string;\n                marketData: any[];\n            } = {\n                symbol: currentSymbol.symbol,\n                marketData: collectedData,\n            };\n\n            publishDataToTopic({\n                topic: IBKREVENTS.ON_MARKET_DATA,\n                data: dataToPublish,\n            });\n\n            delete this.historyDataDump[tickerId];\n        };\n\n        ib.on(\n            'historicalData',\n            (reqId, date, open, high, low, close, volume, barCount, WAP, hasGaps) => {\n                if (includes([-1], open)) {\n                    endhistoricalData(reqId);\n                } else {\n                    const currentSymbol = this.symbolsWithTicker.find((y) => y.tickerId === reqId);\n\n                    const dateFormat = 'YYYYMMDD hh:mm:ss';\n\n                    const newEntry: HistoryData = {\n                        reqId,\n                        date: moment(date, dateFormat).toDate(),\n                        open,\n                        high,\n                        low,\n                        close,\n                        volume,\n                        barCount,\n                        WAP,\n                        hasGaps,\n                    };\n\n                    if (!isEmpty(currentSymbol)) {\n                        // Save into dumpData\n                        this.historyDataDump = {\n                            ...this.historyDataDump,\n                            [reqId]: {\n                                ...(this.historyDataDump[reqId] || null),\n                                data: [\n                                    ...((this.historyDataDump[reqId] &&\n                                        this.historyDataDump[reqId].data) ||\n                                        []),\n                                    newEntry,\n                                ],\n                            },\n                        };\n                    }\n                }\n            }\n        );\n\n        // listen for any historicalData event\n        appEvents.on(IBKREVENTS.GET_MARKET_DATA, (args: GetMarketData) => {\n            // request History Data\n\n            const {\n                symbol,\n                // contract = [symbol, 'SMART', 'USD'],\n                endDateTime = '',\n                durationStr = '1 D',\n                barSizeSetting = '1 min',\n                whatToShow = 'ASK',\n            } = args;\n\n            log(`on history data ${symbol}`);\n\n            if (isEmpty(symbol)) {\n                return;\n            }\n\n            // parse contract\n            const ogContract = args.contract;\n            let contract = ogContract;\n            if (typeof ogContract === 'string' || !ogContract) {\n                // make it a stock by default\n                contract = ib.contract.stock(symbol, 'SMART', 'USD');\n            }\n\n            that.reqHistoryData(\n                {\n                    symbol,\n                    tickerId: getRadomReqId(),\n                },\n                {\n                    contract,\n                    endDateTime,\n                    durationStr,\n                    barSizeSetting,\n                    whatToShow,\n                }\n            );\n        });\n    }\n\n    private reqHistoryData = (args: SymbolWithTicker, params: ReqHistoricalData): void => {\n        const {tickerId, symbol} = args;\n\n        log(`HistoricalData.reqHistoryData`, `Request historyData ${symbol}`);\n\n        // Save this symbol in this class\n        this.symbolsWithTicker.push(args);\n\n        const {contract, endDateTime, durationStr, barSizeSetting, whatToShow} = params;\n\n        //                   tickerId, contract,                    endDateTime, durationStr,             barSizeSetting,             whatToShow,             useRTH, formatDate, keepUpToDate\n        this.ib.reqHistoricalData(\n            tickerId,\n            contract,\n            endDateTime,\n            durationStr || '1800 S',\n            barSizeSetting || '1 secs',\n            whatToShow || 'TRADES',\n            1,\n            1,\n            false\n        );\n    };\n\n    /**\n     * Get historical data using events\n     */\n    public getHistoricalData = (args: GetMarketData): void => {\n        publishDataToTopic({\n            topic: IBKREVENTS.GET_MARKET_DATA,\n            data: args,\n        });\n    };\n\n    /**\n     * ReqHistoricalData Async Promise\n     */\n    public reqHistoricalData = (args: GetMarketData): Promise<HistoryData[]> => {\n        const self = this;\n        const ib = self.ib;\n        const tickerId = getRadomReqId();\n\n        return new Promise((resolve) => {\n            let done = false;\n\n            const marketData: HistoryData[] = [];\n\n            const {\n                symbol,\n                endDateTime = '',\n                durationStr = '1 D',\n                barSizeSetting = '1 min',\n                whatToShow = 'ASK',\n            } = args;\n\n            // parse contract\n            const ogContract = args.contract;\n            let contract = ogContract;\n            if (typeof ogContract === 'string' || !ogContract) {\n                // make it a stock by default\n                contract = ib.contract.stock(symbol, 'SMART', 'USD');\n            }\n\n            const endhistoricalData = (tickerId): void => {\n                if (!done) {\n                    done = true;\n\n                    // remove listeners\n                    ib.off('historicalData', onHistoricalData);\n                    eventfulError(); // close eventful errors\n\n                    // cancel market data\n                    tickerId && ib.cancelHistoricalData(tickerId); // tickerId\n\n                    const collectedData = sortedMarketData(marketData);\n                    resolve(collectedData);\n                }\n            };\n\n            const onHistoricalData = (\n                reqId,\n                date,\n                open,\n                high,\n                low,\n                close,\n                volume,\n                barCount,\n                WAP,\n                hasGaps\n            ) => {\n                if (includes([-1], open)) {\n                    endhistoricalData(reqId);\n                } else {\n                    const currentSymbol = tickerId === reqId;\n                    const dateFormat = 'YYYYMMDD hh:mm:ss';\n\n                    const newEntry: HistoryData = {\n                        reqId,\n                        date: moment(date, dateFormat).toDate(),\n                        open,\n                        high,\n                        low,\n                        close,\n                        volume,\n                        barCount,\n                        WAP,\n                        hasGaps,\n                    };\n\n                    if (currentSymbol) {\n                        marketData.push(newEntry);\n                    }\n                }\n            };\n\n            ib.on('historicalData', onHistoricalData);\n\n            // TODO all more error messages\n            // handleError\n            const eventfulError = handleEventfulError(\n                tickerId,\n                [\n                    `Historical data request pacing violation`,\n                    `No historical market data for ${symbol}`,\n                    `The contract description specified for ${symbol} is ambiguous.`,\n                ],\n                endhistoricalData\n            );\n\n            //                   tickerId, contract, endDateTime, durationStr,             barSizeSetting,             whatToShow,             useRTH, formatDate, keepUpToDate\n            ib.reqHistoricalData(\n                tickerId,\n                contract,\n                endDateTime,\n                durationStr || '1800 S',\n                barSizeSetting || '1 secs',\n                whatToShow || 'TRADES',\n                1,\n                1,\n                false\n            );\n        });\n    };\n}\n\nexport default HistoricalData;\n"]}