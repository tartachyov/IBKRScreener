{"version":3,"file":"price.updates.js","sourceRoot":"","sources":["../../src/realtime/price.updates.ts"],"names":[],"mappings":"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","sourcesContent":["import isEmpty from 'lodash/isEmpty';\nimport {TickPrice} from './price.interfaces';\nimport {IBKRConnection} from '../connection';\nimport {publishDataToTopic, IbkrEvents, IBKREVENTS} from '../events';\nimport {getRadomReqId} from '../_utils/text.utils';\nimport {log} from '../log';\n\nconst ibEvents = IbkrEvents.Instance;\n\ninterface SymbolSubscribers {\n    [x: string]: number;\n}\n\ninterface SymbolWithTicker {\n    tickerId: number;\n    symbol: string;\n    tickType?: TickPrice;\n}\n\ninterface ReqPriceUpdates {\n    symbol: string;\n    tickType?: TickPrice;\n}\n\nexport class PriceUpdates {\n    ib: any;\n    subscribers: SymbolSubscribers = {};\n\n    subscribersWithTicker: SymbolWithTicker[] = [];\n\n    private static _instance: PriceUpdates;\n\n    public static get Instance(): PriceUpdates {\n        return this._instance || (this._instance = new this());\n    }\n\n    private constructor() {\n        const that = this;\n        /**\n         * When request to subscribe to market data\n         * IBKREVENTS.SUBSCRIBE_PRICE_UPDATES\n         */\n        ibEvents.on(IBKREVENTS.SUBSCRIBE_PRICE_UPDATES, (data: ReqPriceUpdates) => {\n            that.subscribe(data);\n        });\n    }\n\n    /**\n     * init\n     */\n    public init(): void {\n        const ib = IBKRConnection.Instance.getIBKR();\n\n        this.ib = ib;\n        const that = this;\n\n        ib.on(\n            'tickPrice',\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            (tickerId: number, tickType: TickPrice, price: number, _canAutoExecute: boolean) => {\n                const thisSymbol = that.subscribersWithTicker.find(\n                    (symbol) => symbol.tickerId === tickerId\n                );\n\n                const currentTickerType = thisSymbol.tickType;\n\n                const currentSymbol = thisSymbol && thisSymbol.symbol;\n\n                const tickTypeWords = ib.util.tickTypeToString(tickType);\n\n                if (isEmpty(currentSymbol)) {\n                    log('PriceUpdates.tickPrice', `Symbol not found ${JSON.stringify(thisSymbol)}`);\n                    return;\n                }\n\n                // https://www.investopedia.com/terms/b/bid-and-ask.asp\n\n                // Matches as requested\n                if (currentTickerType === tickTypeWords) {\n                    log(\n                        'PriceUpdates.tickPrice',\n                        `${tickTypeWords}:PRICE ${currentSymbol} => $${price} tickerId = ${tickerId}`\n                    );\n\n                    if (price === -1) {\n                        return log(\n                            'PriceUpdates.tickPrice',\n                            `${tickTypeWords}:PRICE NULL ${currentSymbol} $${price}`\n                        );\n                    }\n\n                    const dataToPublish: {\n                        symbol: string;\n                        price: number;\n                        date: Date;\n                    } = {\n                        symbol: currentSymbol,\n                        price,\n                        date: new Date(),\n                    };\n\n                    // send to symbolData topic\n                    publishDataToTopic({\n                        topic: IBKREVENTS.ON_PRICE_UPDATES,\n                        data: dataToPublish,\n                    });\n                }\n            }\n        );\n    }\n\n    private subscribe({symbol, tickType = 'ASK'}: ReqPriceUpdates) {\n        const that = this;\n\n        if (!that.ib) {\n            that.init();\n        }\n\n        // Check if symbol exist\n        if (isEmpty(symbol)) {\n            return log('PriceUpdates.subscribe', `Symbol cannot be null`);\n        }\n\n        // Check if we already have the symbol\n        if (this.subscribers[symbol]) {\n            //  symbol is already subscribed\n            return log(\n                'PriceUpdates.subscribe',\n                `${symbol.toLocaleUpperCase()} is already subscribed`\n            );\n        }\n\n        // Assign random number for symbol\n        this.subscribers[symbol] = getRadomReqId();\n\n        // Add this symbol to subscribersTicker\n        this.subscribersWithTicker.push({\n            symbol,\n            tickerId: that.subscribers[symbol],\n            tickType,\n        });\n\n        setImmediate(() => {\n            that.ib.reqMktData(\n                that.subscribers[symbol],\n                that.ib.contract.stock(symbol),\n                '',\n                false,\n                false\n            );\n            return log(\n                'PriceUpdates.subscribe',\n                `${symbol.toLocaleUpperCase()} is successfully subscribed`\n            );\n        });\n    }\n\n    public unsubscribeAllSymbols(): void {\n        const that = this;\n\n        setTimeout(() => {\n            if (!isEmpty(that.subscribersWithTicker)) {\n                that.subscribersWithTicker.forEach((symbolTicker) => {\n                    log(`cancelMktData ${symbolTicker.symbol} tickerId=${symbolTicker.tickerId}`);\n                    that.ib.cancelMktData(symbolTicker.tickerId);\n                });\n            }\n            return;\n        }, 1000);\n    }\n}\n\nexport default PriceUpdates;\n"]}