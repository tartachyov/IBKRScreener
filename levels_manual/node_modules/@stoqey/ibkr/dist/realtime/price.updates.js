"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var isEmpty_1 = __importDefault(require("lodash/isEmpty"));
var connection_1 = require("../connection");
var events_1 = require("../events");
var text_utils_1 = require("../_utils/text.utils");
var log_1 = require("../log");
var ibEvents = events_1.IbkrEvents.Instance;
var PriceUpdates = /** @class */ (function () {
    function PriceUpdates() {
        this.subscribers = {};
        this.subscribersWithTicker = [];
        var that = this;
        /**
         * When request to subscribe to market data
         * IBKREVENTS.SUBSCRIBE_PRICE_UPDATES
         */
        ibEvents.on(events_1.IBKREVENTS.SUBSCRIBE_PRICE_UPDATES, function (data) {
            that.subscribe(data);
        });
    }
    Object.defineProperty(PriceUpdates, "Instance", {
        get: function () {
            return this._instance || (this._instance = new this());
        },
        enumerable: true,
        configurable: true
    });
    /**
     * init
     */
    PriceUpdates.prototype.init = function () {
        var ib = connection_1.IBKRConnection.Instance.getIBKR();
        this.ib = ib;
        var that = this;
        ib.on('tickPrice', 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        function (tickerId, tickType, price, _canAutoExecute) {
            var thisSymbol = that.subscribersWithTicker.find(function (symbol) { return symbol.tickerId === tickerId; });
            var currentTickerType = thisSymbol.tickType;
            var currentSymbol = thisSymbol && thisSymbol.symbol;
            var tickTypeWords = ib.util.tickTypeToString(tickType);
            if (isEmpty_1.default(currentSymbol)) {
                log_1.log('PriceUpdates.tickPrice', "Symbol not found " + JSON.stringify(thisSymbol));
                return;
            }
            // https://www.investopedia.com/terms/b/bid-and-ask.asp
            // Matches as requested
            if (currentTickerType === tickTypeWords) {
                log_1.log('PriceUpdates.tickPrice', tickTypeWords + ":PRICE " + currentSymbol + " => $" + price + " tickerId = " + tickerId);
                if (price === -1) {
                    return log_1.log('PriceUpdates.tickPrice', tickTypeWords + ":PRICE NULL " + currentSymbol + " $" + price);
                }
                var dataToPublish = {
                    symbol: currentSymbol,
                    price: price,
                    date: new Date(),
                };
                // send to symbolData topic
                events_1.publishDataToTopic({
                    topic: events_1.IBKREVENTS.ON_PRICE_UPDATES,
                    data: dataToPublish,
                });
            }
        });
    };
    PriceUpdates.prototype.subscribe = function (_a) {
        var symbol = _a.symbol, _b = _a.tickType, tickType = _b === void 0 ? 'ASK' : _b;
        var that = this;
        if (!that.ib) {
            that.init();
        }
        // Check if symbol exist
        if (isEmpty_1.default(symbol)) {
            return log_1.log('PriceUpdates.subscribe', "Symbol cannot be null");
        }
        // Check if we already have the symbol
        if (this.subscribers[symbol]) {
            //  symbol is already subscribed
            return log_1.log('PriceUpdates.subscribe', symbol.toLocaleUpperCase() + " is already subscribed");
        }
        // Assign random number for symbol
        this.subscribers[symbol] = text_utils_1.getRadomReqId();
        // Add this symbol to subscribersTicker
        this.subscribersWithTicker.push({
            symbol: symbol,
            tickerId: that.subscribers[symbol],
            tickType: tickType,
        });
        setImmediate(function () {
            that.ib.reqMktData(that.subscribers[symbol], that.ib.contract.stock(symbol), '', false, false);
            return log_1.log('PriceUpdates.subscribe', symbol.toLocaleUpperCase() + " is successfully subscribed");
        });
    };
    PriceUpdates.prototype.unsubscribeAllSymbols = function () {
        var that = this;
        setTimeout(function () {
            if (!isEmpty_1.default(that.subscribersWithTicker)) {
                that.subscribersWithTicker.forEach(function (symbolTicker) {
                    log_1.log("cancelMktData " + symbolTicker.symbol + " tickerId=" + symbolTicker.tickerId);
                    that.ib.cancelMktData(symbolTicker.tickerId);
                });
            }
            return;
        }, 1000);
    };
    return PriceUpdates;
}());
exports.PriceUpdates = PriceUpdates;
exports.default = PriceUpdates;
//# sourceMappingURL=price.updates.js.map