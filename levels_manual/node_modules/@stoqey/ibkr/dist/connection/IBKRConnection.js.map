{"version":3,"file":"IBKRConnection.js","sourceRoot":"","sources":["../../src/connection/IBKRConnection.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport ibkr from '@stoqey/ib';\nimport {IB_HOST, IB_PORT} from '../config';\nimport {publishDataToTopic} from '../events/IbkrEvents.publisher';\nimport {IBKREVENTS, IbkrEvents} from '../events';\nimport {ConnectionStatus} from './connection.interfaces';\nimport AccountSummary from '../account/AccountSummary';\nimport {Portfolios} from '../portfolios';\nimport Orders from '../orders/Orders';\nimport includes from 'lodash/includes';\nimport {log} from '../log';\n\nconst appEvents = IbkrEvents.Instance;\n\n// This has to be unique per this execution\nconst clientId = _.random(100, 100000);\n\n/**\n * Global IBKR connection\n * @singleton class\n */\nexport class IBKRConnection {\n    public status: ConnectionStatus = null;\n    public IB_PORT: number = IB_PORT;\n    public IB_HOST: string = IB_HOST;\n    private static _instance: IBKRConnection;\n\n    public ib: ibkr;\n\n    public static get Instance(): IBKRConnection {\n        return this._instance || (this._instance = new this());\n    }\n\n    private constructor() {}\n\n    /**\n     * init\n     */\n    public init = (host: string, port: number): void => {\n        if (!this.ib) {\n            this.ib = new ibkr({\n                clientId,\n                host,\n                port,\n            });\n\n            this.ib.setMaxListeners(0);\n            this.listen();\n        }\n    };\n\n    /**\n     * initialiseDep\n     * Call/Initialize Account summary -> Portfolios -> OpenOrders\n     */\n    public initialiseDep = async (): Promise<boolean> => {\n        try {\n            // 1. Account summary\n            log('1. Account summary');\n            const accountSummary = AccountSummary.Instance;\n            accountSummary.init();\n            await accountSummary.getAccountSummary();\n            // 2. Portfolios\n            log('2. Portfolios');\n            const portfolio = Portfolios.Instance;\n            await portfolio.init();\n            await portfolio.getPortfolios();\n\n            log('3. Orders');\n            const openOrders = Orders.Instance;\n            await openOrders.init();\n            await openOrders.getOpenOrders();\n\n            return true;\n        } catch (error) {\n            log('error initialising IBKR', error);\n            return false;\n        }\n    };\n\n    /**\n     * On listen for IB connection\n     */\n    private listen = (): void => {\n        const self: IBKRConnection = this;\n\n        function disconnectApp() {\n            publishDataToTopic({\n                topic: IBKREVENTS.DISCONNECTED,\n                data: {},\n            });\n            self.status = IBKREVENTS.DISCONNECTED;\n            return log(IBKREVENTS.DISCONNECTED, `Error connecting client => ${clientId}`);\n        }\n\n        // Important listners\n        this.ib.on(IBKREVENTS.CONNECTED, function (err: Error) {\n            async function connectApp() {\n                if (err) {\n                    return disconnectApp();\n                }\n\n                log(`.................................................................`);\n                log(`...... Connected client ${clientId}, initialising services ......`);\n\n                // initialise dependencies\n                const connected = await self.initialiseDep();\n\n                if (connected) {\n                    publishDataToTopic({\n                        topic: IBKREVENTS.CONNECTED,\n                        data: {\n                            connected: true,\n                        },\n                    });\n                    self.status = IBKREVENTS.CONNECTED;\n                    log(`...... Successfully running ${clientId}'s services ..`);\n                    return log(`.....................................................`);\n                }\n\n                disconnectApp();\n            }\n            connectApp();\n        });\n\n        this.ib.on(IBKREVENTS.ERROR, function (err: any) {\n            const message = err && err.message;\n\n            log(IBKREVENTS.ERROR, err && err.message);\n\n            if (includes(message, 'ECONNREFUSED') || (err && err.code === 'ECONNREFUSED')) {\n                return disconnectApp();\n            }\n        });\n\n        this.ib.on(IBKREVENTS.DISCONNECTED, function (err: Error) {\n            log(IBKREVENTS.DISCONNECTED, `${clientId} Connection disconnected error => ${err}`);\n            disconnectApp();\n            process.exit(1);\n        });\n\n        // connect the IBKR\n        this.ib.connect();\n\n        // App events\n        appEvents.on(IBKREVENTS.PING, () => {\n            // If we have the status\n            if (self.status) {\n                // PONG the current status\n                publishDataToTopic({\n                    topic: self.status,\n                    data: {},\n                });\n            }\n        });\n    };\n\n    /**\n     * getIBKR instance\n     */\n    public getIBKR = (): ibkr => {\n        return this.ib;\n    };\n\n    /**\n     * disconnectIBKR\n     */\n    public disconnectIBKR(): void {\n        this.status = IBKREVENTS.DISCONNECTED;\n        try {\n            log(`IBKR Force shutdown ${clientId} ðŸ˜´ðŸ˜´ðŸ˜´`);\n            this.ib.disconnect();\n        } catch (error) {\n            log(IBKREVENTS.ERROR, error);\n        }\n    }\n}\nexport default IBKRConnection;\n"]}