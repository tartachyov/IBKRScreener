"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = __importStar(require("lodash"));
var ib_1 = __importDefault(require("@stoqey/ib"));
var config_1 = require("../config");
var IbkrEvents_publisher_1 = require("../events/IbkrEvents.publisher");
var events_1 = require("../events");
var AccountSummary_1 = __importDefault(require("../account/AccountSummary"));
var portfolios_1 = require("../portfolios");
var Orders_1 = __importDefault(require("../orders/Orders"));
var includes_1 = __importDefault(require("lodash/includes"));
var log_1 = require("../log");
var appEvents = events_1.IbkrEvents.Instance;
// This has to be unique per this execution
var clientId = _.random(100, 100000);
/**
 * Global IBKR connection
 * @singleton class
 */
var IBKRConnection = /** @class */ (function () {
    function IBKRConnection() {
        var _this = this;
        this.status = null;
        this.IB_PORT = config_1.IB_PORT;
        this.IB_HOST = config_1.IB_HOST;
        /**
         * init
         */
        this.init = function (host, port) {
            if (!_this.ib) {
                _this.ib = new ib_1.default({
                    clientId: clientId,
                    host: host,
                    port: port,
                });
                _this.ib.setMaxListeners(0);
                _this.listen();
            }
        };
        /**
         * initialiseDep
         * Call/Initialize Account summary -> Portfolios -> OpenOrders
         */
        this.initialiseDep = function () { return __awaiter(_this, void 0, void 0, function () {
            var accountSummary, portfolio, openOrders, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 6, , 7]);
                        // 1. Account summary
                        log_1.log('1. Account summary');
                        accountSummary = AccountSummary_1.default.Instance;
                        accountSummary.init();
                        return [4 /*yield*/, accountSummary.getAccountSummary()];
                    case 1:
                        _a.sent();
                        // 2. Portfolios
                        log_1.log('2. Portfolios');
                        portfolio = portfolios_1.Portfolios.Instance;
                        return [4 /*yield*/, portfolio.init()];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, portfolio.getPortfolios()];
                    case 3:
                        _a.sent();
                        log_1.log('3. Orders');
                        openOrders = Orders_1.default.Instance;
                        return [4 /*yield*/, openOrders.init()];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, openOrders.getOpenOrders()];
                    case 5:
                        _a.sent();
                        return [2 /*return*/, true];
                    case 6:
                        error_1 = _a.sent();
                        log_1.log('error initialising IBKR', error_1);
                        return [2 /*return*/, false];
                    case 7: return [2 /*return*/];
                }
            });
        }); };
        /**
         * On listen for IB connection
         */
        this.listen = function () {
            var self = _this;
            function disconnectApp() {
                IbkrEvents_publisher_1.publishDataToTopic({
                    topic: events_1.IBKREVENTS.DISCONNECTED,
                    data: {},
                });
                self.status = events_1.IBKREVENTS.DISCONNECTED;
                return log_1.log(events_1.IBKREVENTS.DISCONNECTED, "Error connecting client => " + clientId);
            }
            // Important listners
            _this.ib.on(events_1.IBKREVENTS.CONNECTED, function (err) {
                function connectApp() {
                    return __awaiter(this, void 0, void 0, function () {
                        var connected;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (err) {
                                        return [2 /*return*/, disconnectApp()];
                                    }
                                    log_1.log(".................................................................");
                                    log_1.log("...... Connected client " + clientId + ", initialising services ......");
                                    return [4 /*yield*/, self.initialiseDep()];
                                case 1:
                                    connected = _a.sent();
                                    if (connected) {
                                        IbkrEvents_publisher_1.publishDataToTopic({
                                            topic: events_1.IBKREVENTS.CONNECTED,
                                            data: {
                                                connected: true,
                                            },
                                        });
                                        self.status = events_1.IBKREVENTS.CONNECTED;
                                        log_1.log("...... Successfully running " + clientId + "'s services ..");
                                        return [2 /*return*/, log_1.log(".....................................................")];
                                    }
                                    disconnectApp();
                                    return [2 /*return*/];
                            }
                        });
                    });
                }
                connectApp();
            });
            _this.ib.on(events_1.IBKREVENTS.ERROR, function (err) {
                var message = err && err.message;
                log_1.log(events_1.IBKREVENTS.ERROR, err && err.message);
                if (includes_1.default(message, 'ECONNREFUSED') || (err && err.code === 'ECONNREFUSED')) {
                    return disconnectApp();
                }
            });
            _this.ib.on(events_1.IBKREVENTS.DISCONNECTED, function (err) {
                log_1.log(events_1.IBKREVENTS.DISCONNECTED, clientId + " Connection disconnected error => " + err);
                disconnectApp();
                process.exit(1);
            });
            // connect the IBKR
            _this.ib.connect();
            // App events
            appEvents.on(events_1.IBKREVENTS.PING, function () {
                // If we have the status
                if (self.status) {
                    // PONG the current status
                    IbkrEvents_publisher_1.publishDataToTopic({
                        topic: self.status,
                        data: {},
                    });
                }
            });
        };
        /**
         * getIBKR instance
         */
        this.getIBKR = function () {
            return _this.ib;
        };
    }
    Object.defineProperty(IBKRConnection, "Instance", {
        get: function () {
            return this._instance || (this._instance = new this());
        },
        enumerable: true,
        configurable: true
    });
    /**
     * disconnectIBKR
     */
    IBKRConnection.prototype.disconnectIBKR = function () {
        this.status = events_1.IBKREVENTS.DISCONNECTED;
        try {
            log_1.log("IBKR Force shutdown " + clientId + " \uD83D\uDE34\uD83D\uDE34\uD83D\uDE34");
            this.ib.disconnect();
        }
        catch (error) {
            log_1.log(events_1.IBKREVENTS.ERROR, error);
        }
    };
    return IBKRConnection;
}());
exports.IBKRConnection = IBKRConnection;
exports.default = IBKRConnection;
//# sourceMappingURL=IBKRConnection.js.map