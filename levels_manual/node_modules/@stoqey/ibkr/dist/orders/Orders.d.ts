import IB from '@stoqey/ib';
import { OrderWithContract, OrderStatusType, OrderStock } from './orders.interfaces';
interface SymbolTickerOrder {
    tickerId: number;
    orderPermId: number;
    symbol: string;
    stockOrderRequest: OrderStock;
    orderStatus?: OrderStatusType;
}
export declare class Orders {
    ib: IB;
    tickerId: number;
    processing: boolean;
    /**
     * Orders to be taken from nextValidId
     * These are always deleted after order is submitted to IB
     */
    stockOrders: OrderStock[];
    timeoutRetries: {
        [x: string]: string[];
    };
    /**
     * A ledger of orders that are being executed,
     * This is to avoid duplicate orders
     * @unique
     * new order overrides old one
     * only filled, canceled, error orders can be overridden
     */
    symbolsTickerOrder: {
        [x: string]: SymbolTickerOrder;
    };
    /**
     * Redundant orderIdNext recorded
     */
    orderIdNext: number;
    openOrders: {
        [x: string]: OrderWithContract;
    };
    receivedOrders: boolean;
    private static _instance;
    static get Instance(): Orders;
    private constructor();
    /**
     * init
     */
    init: () => Promise<void>;
    getOpenOrders: (timeout?: number) => Promise<OrderWithContract[]>;
    isActive: () => boolean;
    /**
     * Place Order
     * Order is added to queue if is already processing one order
     * @stockOrder
     * @options ? {}
     * @when Until IBKR releases a new OrderId, then order is placed and process can pick other orders
     */
    placeOrder: (stockOrder: OrderStock, options?: {
        retryCounts?: number;
        retryTime?: number;
    }) => Promise<any>;
}
export default Orders;
