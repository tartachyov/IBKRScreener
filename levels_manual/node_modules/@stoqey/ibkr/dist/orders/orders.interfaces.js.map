{"version":3,"file":"orders.interfaces.js","sourceRoot":"","sources":["../../src/orders/orders.interfaces.ts"],"names":[],"mappings":"","sourcesContent":["import {ContractObject} from '../contracts';\n\nexport type action = 'BUY' | 'SELL';\n\n// https://interactivebrokers.github.io/tws-api/interfaceIBApi_1_1EWrapper.html#a17f2a02d6449710b6394d0266a353313\nexport type OrderStatusType =\n    | 'PendingSubmit' // indicates that you have transmitted the order, but have not yet received confirmation that it has been accepted by the order destination.\n    | 'PendingCancel' // PendingCancel - indicates that you have sent a request to cancel the order but have not yet received cancel confirmation from the order destination. At this point, your order is not confirmed canceled. It is not guaranteed that the cancellation will be successful.\n    | 'PreSubmitted' //\n    | 'Submitted' //\n    | 'ApiCancelled' //\n    | 'Cancelled'\n    | 'Filled';\n\nexport interface ORDER {\n    orderId: number;\n    action: action;\n    totalQuantity: number;\n    orderType: string;\n    lmtPrice: number;\n    auxPrice: number;\n    tif: string;\n    ocaGroup: string;\n    account: string;\n    openClose: string;\n    origin: number;\n    orderRef: string;\n    clientId: number;\n    permId: number;\n    outsideRth: boolean;\n    hidden: boolean;\n    discretionaryAmt: number;\n    goodAfterTime: string;\n    faGroup: string;\n    faMethod: string;\n    faPercentage: string;\n    faProfile: string;\n    goodTillDate: string;\n    rule80A: string;\n    percentOffset: number;\n    settlingFirm: string;\n    shortSaleSlot: number;\n    designatedLocation: string;\n    exemptCode: number;\n    auctionStrategy: number;\n    startingPrice: number;\n    stockRefPrice: number;\n    delta: number;\n    stockRangeLower: number;\n    stockRangeUpper: number;\n    displaySize?: any;\n    blockOrder: boolean;\n    sweepToFill: boolean;\n    allOrNone: boolean;\n    minQty: number;\n    ocaType: number;\n    eTradeOnly: boolean;\n    firmQuoteOnly: boolean;\n    nbboPriceCap: number;\n    parentId: number;\n    triggerMethod: number;\n    volatility: number;\n    volatilityType: number;\n    deltaNeutralOrderType: string;\n    deltaNeutralAuxPrice: number;\n    deltaNeutralConId: number;\n    deltaNeutralSettlingFirm: string;\n    deltaNeutralClearingAccount: string;\n    deltaNeutralClearingIntent: string;\n    deltaNeutralOpenClose: string;\n    deltaNeutralShortSale: boolean;\n    deltaNeutralShortSaleSlot: number;\n    deltaNeutralDesignatedLocation: string;\n    continuousUpdate: number;\n    referencePriceType: number;\n    trailStopPrice: number;\n    trailingPercent: number;\n    basisPoints: number;\n    basisPointsType: number;\n    scaleInitLevelSize: number;\n    scaleSubsLevelSize: number;\n    scalePriceIncrement: number;\n    hedgeType: string;\n    optOutSmartRouting: boolean;\n    clearingAccount: string;\n    clearingIntent: string;\n    notHeld: boolean;\n    algoStrategy: string;\n    whatIf: boolean;\n}\n\nexport interface OrderWithContract extends ORDER, ContractObject {\n    orderId: number;\n    orderState: OrderState;\n}\n\nexport interface OrderStatus {\n    status: OrderStatusType;\n    filled: number;\n    remaining: number;\n    avgFillPrice: number;\n    permId: any;\n    parentId: any;\n    lastFillPrice: number;\n    clientId: any;\n    whyHeld: number;\n}\n\nexport interface OrderState {\n    status: OrderStatusType;\n    initMargin: string;\n    maintMargin: string;\n    equityWithLoan: string;\n    commission: number;\n    minCommission: number;\n    maxCommission: number;\n    commissionCurrency: string;\n    warningText: string;\n}\n\n// ORDER TRADE\nexport type OrderAction = 'BUY' | 'SELL';\n\nexport type OrderType =\n    | 'limit' // ib.order.limit('SELL', 1, 9999)\n    | 'market' // .order.market(action, quantity, transmitOrder, goodAfterTime, goodTillDate)\n    | 'marketClose' // .order.marketClose(action, quantity, price, transmitOrder)\n    | 'stop' // .order.stop(action, quantity, price, transmitOrder, parentId, tif)\n    | 'stopLimit' // .order.stopLimit(action, quantity, limitPrice, stopPrice, transmitOrder, parentId, tif)\n    | 'trailingStop'; // .order.trailingStop(action, quantity, auxPrice, tif, transmitOrder, parentId)\n\nexport interface OrderStock {\n    symbol: string;\n    action: OrderAction;\n    type: OrderType;\n    parameters: any[]; // 'SELL', 1, 9999,\n    size?: number;\n    capital?: number;\n    exitTrade: boolean;\n    exitParams?: {\n        /**\n         * When exiting a trade\n         * Create sale\n         */\n        entryTime: Date;\n        entryPrice: number;\n        exitTime: Date;\n        exitPrice: number;\n    };\n}\n\n// CREATE Sale\nexport interface CreateSale {\n    entryPrice: number;\n    entryTime: Date;\n    exitTime: Date;\n    exitPrice: number;\n    symbol: string;\n    capital: number;\n    profit?: number;\n    website?: string;\n    industry?: string;\n    shortName?: string;\n}\n"]}